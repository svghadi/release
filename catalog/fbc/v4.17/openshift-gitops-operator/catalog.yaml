---
defaultChannel: stable-v1.16
name: openshift-gitops-operator
schema: olm.package
---
entries:
  - name: openshift-gitops-operator.v1.14.0
  - name: openshift-gitops-operator.v1.14.1
  - name: openshift-gitops-operator.v1.14.2-0.1738140086.p
  - name: openshift-gitops-operator.v1.14.3
    skips:
      - openshift-gitops-operator.v1.14.0
      - openshift-gitops-operator.v1.14.1
      - openshift-gitops-operator.v1.14.2-0.1738140086.p
  - name: openshift-gitops-operator.v1.15.0-0.1738074324.p
  - name: openshift-gitops-operator.v1.15.1
    replaces: openshift-gitops-operator.v1.14.3
    skips:
      - openshift-gitops-operator.v1.14.3
      - openshift-gitops-operator.v1.15.0-0.1738074324.p
  - name: openshift-gitops-operator.v1.16.0
    replaces: openshift-gitops-operator.v1.15.1
    skips:
      - openshift-gitops-operator.v1.15.1
    skipRange: '>=1.14.0 <1.14.0'
name: stable-v1
package: openshift-gitops-operator
schema: olm.channel
---
entries:
  - name: openshift-gitops-operator.v1.14.0
  - name: openshift-gitops-operator.v1.14.1
  - name: openshift-gitops-operator.v1.14.2-0.1738140086.p
  - name: openshift-gitops-operator.v1.14.3
    skips:
      - openshift-gitops-operator.v1.14.0
      - openshift-gitops-operator.v1.14.1
      - openshift-gitops-operator.v1.14.2-0.1738140086.p
    skipRange: '>=1.14.0 <1.14.0'
name: stable-v1.14
package: openshift-gitops-operator
schema: olm.channel
---
entries:
  - name: openshift-gitops-operator.v1.15.0-0.1738074324.p
  - name: openshift-gitops-operator.v1.15.1
    skips:
      - openshift-gitops-operator.v1.15.0-0.1738074324.p
    skipRange: '>=1.14.0 <1.15.0-0.1738074324.p'
name: stable-v1.15
package: openshift-gitops-operator
schema: olm.channel
---
entries:
  - name: openshift-gitops-operator.v1.16.0
    skipRange: '>=1.14.0 <1.16.0'
name: stable-v1.16
package: openshift-gitops-operator
schema: olm.channel
---
image: registry.redhat.io/openshift-gitops-1/gitops-operator-bundle@sha256:610437902999bf406e6284a1f587e055e4ccc36cc4f83f3cf5aec2981843698b
name: openshift-gitops-operator.v1.14.0
package: openshift-gitops-operator
properties:
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: AnalysisRun
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: AnalysisTemplate
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: AppProject
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: Application
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ApplicationSet
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ArgoCD
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ArgoCD
      version: v1beta1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ClusterAnalysisTemplate
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: Experiment
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: NotificationsConfiguration
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: Rollout
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: RolloutManager
      version: v1alpha1
  - type: olm.gvk
    value:
      group: pipelines.openshift.io
      kind: GitopsService
      version: v1alpha1
  - type: olm.package
    value:
      packageName: openshift-gitops-operator
      version: 1.14.0
  - type: olm.csv.metadata
    value:
      annotations:
        alm-examples: |-
          [
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "AppProject",
              "metadata": {
                "name": "example"
              },
              "spec": null
            },
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "Application",
              "metadata": {
                "name": "example"
              },
              "spec": null
            },
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "ApplicationSet",
              "metadata": {
                "name": "example"
              },
              "spec": null
            },
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "NotificationsConfiguration",
              "metadata": {
                "name": "default-notifications-configuration"
              },
              "spec": {
                "templates": {
                  "template.app-created": "email:\n  subject: Application {{.app.metadata.name}} has been created.\nmessage: Application {{.app.metadata.name}} has been created.\nteams:\n  title: Application {{.app.metadata.name}} has been created.",
                  "template.app-deleted": "email:\n  subject: Application {{.app.metadata.name}} has been deleted.\nmessage: Application {{.app.metadata.name}} has been deleted.\nteams:\n  title: Application {{.app.metadata.name}} has been deleted.",
                  "template.app-deployed": "email:\n  subject: New version of an application {{.app.metadata.name}} is up and running.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} is now running new version of deployments manifests.\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#18be52\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Revision\",\n        \"value\": \"{{.app.status.sync.revision}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    },\n    {\n      \"name\": \"Revision\",\n      \"value\": \"{{.app.status.sync.revision}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Operation Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#000080'\n  title: New version of an application {{.app.metadata.name}} is up and running.",
                  "template.app-health-degraded": "email:\n  subject: Application {{.app.metadata.name}} has degraded.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}} Application {{.app.metadata.name}} has degraded.\n  Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\": \"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#f4c030\",\n      \"fields\": [\n      {\n        \"title\": \"Health Status\",\n        \"value\": \"{{.app.status.health.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Health Status\",\n      \"value\": \"{{.app.status.health.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#FF0000'\n  title: Application {{.app.metadata.name}} has degraded.",
                  "template.app-sync-failed": "email:\n  subject: Failed to sync application {{.app.metadata.name}}.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}}  The sync operation of application {{.app.metadata.name}} has failed at {{.app.status.operationState.finishedAt}} with the following error: {{.app.status.operationState.message}}\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#E96D76\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Failed at\",\n      \"value\": \"{{.app.status.operationState.finishedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Operation\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#FF0000'\n  title: Failed to sync application {{.app.metadata.name}}.",
                  "template.app-sync-running": "email:\n  subject: Start syncing application {{.app.metadata.name}}.\nmessage: |\n  The sync operation of application {{.app.metadata.name}} has started at {{.app.status.operationState.startedAt}}.\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#0DADEA\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Started at\",\n      \"value\": \"{{.app.status.operationState.startedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Operation\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  title: Start syncing application {{.app.metadata.name}}.",
                  "template.app-sync-status-unknown": "email:\n  subject: Application {{.app.metadata.name}} sync status is 'Unknown'\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}} Application {{.app.metadata.name}} sync is 'Unknown'.\n  Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\n  {{if ne .serviceType \"slack\"}}\n  {{range $c := .app.status.conditions}}\n      * {{$c.message}}\n  {{end}}\n  {{end}}\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#E96D76\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  title: Application {{.app.metadata.name}} sync status is 'Unknown'",
                  "template.app-sync-succeeded": "email:\n  subject: Application {{.app.metadata.name}} has been successfully synced.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} has been successfully synced at {{.app.status.operationState.finishedAt}}.\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#18be52\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Synced at\",\n      \"value\": \"{{.app.status.operationState.finishedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Operation Details\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#000080'\n  title: Application {{.app.metadata.name}} has been successfully synced"
                },
                "triggers": {
                  "trigger.on-created": "- description: Application is created.\n  oncePer: app.metadata.name\n  send:\n  - app-created\n  when: \"true\"",
                  "trigger.on-deleted": "- description: Application is deleted.\n  oncePer: app.metadata.name\n  send:\n  - app-deleted\n  when: app.metadata.deletionTimestamp != nil",
                  "trigger.on-deployed": "- description: Application is synced and healthy. Triggered once per commit.\n  oncePer: app.status.operationState.syncResult.revision\n  send:\n  - app-deployed\n  when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status\n      == 'Healthy'",
                  "trigger.on-health-degraded": "- description: Application has degraded\n  send:\n  - app-health-degraded\n  when: app.status.health.status == 'Degraded'",
                  "trigger.on-sync-failed": "- description: Application syncing has failed\n  send:\n  - app-sync-failed\n  when: app.status.operationState.phase in ['Error', 'Failed']",
                  "trigger.on-sync-running": "- description: Application is being synced\n  send:\n  - app-sync-running\n  when: app.status.operationState.phase in ['Running']",
                  "trigger.on-sync-status-unknown": "- description: Application status is 'Unknown'\n  send:\n  - app-sync-status-unknown\n  when: app.status.sync.status == 'Unknown'",
                  "trigger.on-sync-succeeded": "- description: Application syncing has succeeded\n  send:\n  - app-sync-succeeded\n  when: app.status.operationState.phase in ['Succeeded']"
                }
              }
            },
            {
              "apiVersion": "argoproj.io/v1beta1",
              "kind": "ArgoCD",
              "metadata": {
                "name": "argocd"
              },
              "spec": {
                "controller": {
                  "resources": {
                    "limits": {
                      "cpu": "2000m",
                      "memory": "2048Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "1024Mi"
                    }
                  }
                },
                "ha": {
                  "enabled": false,
                  "resources": {
                    "limits": {
                      "cpu": "500m",
                      "memory": "256Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "128Mi"
                    }
                  }
                },
                "rbac": {
                  "defaultPolicy": "",
                  "policy": "g, system:cluster-admins, role:admin\n",
                  "scopes": "[groups]"
                },
                "redis": {
                  "resources": {
                    "limits": {
                      "cpu": "500m",
                      "memory": "256Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "128Mi"
                    }
                  }
                },
                "repo": {
                  "resources": {
                    "limits": {
                      "cpu": "1000m",
                      "memory": "1024Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "256Mi"
                    }
                  }
                },
                "resourceExclusions": "- apiGroups:\n  - tekton.dev\n  clusters:\n  - '*'\n  kinds:\n  - TaskRun\n  - PipelineRun        \n",
                "server": {
                  "resources": {
                    "limits": {
                      "cpu": "500m",
                      "memory": "256Mi"
                    },
                    "requests": {
                      "cpu": "125m",
                      "memory": "128Mi"
                    }
                  },
                  "route": {
                    "enabled": true
                  }
                },
                "sso": {
                  "dex": {
                    "openShiftOAuth": true,
                    "resources": {
                      "limits": {
                        "cpu": "500m",
                        "memory": "256Mi"
                      },
                      "requests": {
                        "cpu": "250m",
                        "memory": "128Mi"
                      }
                    }
                  },
                  "provider": "dex"
                }
              }
            },
            {
              "apiVersion": "pipelines.openshift.io/v1alpha1",
              "kind": "GitopsService",
              "metadata": {
                "name": "gitopsservice-sample"
              },
              "spec": null
            }
          ]
        capabilities: Deep Insights
        console.openshift.io/plugins: '["gitops-plugin"]'
        containerImage: registry.redhat.io/openshift-gitops-1/gitops-rhel8-operator@sha256:91588806c263e3cc10c5245c89785234b1d0fe44e04ee0c2645f30c34ccab3ea
        createdAt: "2024-09-13 17:23:26"
        description: Enables teams to adopt GitOps principles for managing cluster configurations and application delivery across hybrid multi-cluster Kubernetes environments.
        features.operators.openshift.io/disconnected: "true"
        features.operators.openshift.io/fips-compliant: "false"
        features.operators.openshift.io/proxy-aware: "true"
        features.operators.openshift.io/tls-profiles: "false"
        features.operators.openshift.io/token-auth-aws: "false"
        features.operators.openshift.io/token-auth-azure: "false"
        features.operators.openshift.io/token-auth-gcp: "false"
        olm.skipRange: '>=1.0.0 <1.14.0'
        operatorframework.io/cluster-monitoring: "true"
        operatorframework.io/suggested-namespace: openshift-gitops-operator
        operators.openshift.io/infrastructure-features: '["disconnected"]'
        operators.openshift.io/valid-subscription: '["OpenShift Container Platform", "OpenShift Platform Plus"]'
        operators.operatorframework.io/builder: operator-sdk-v1.35.0
        operators.operatorframework.io/internal-objects: '["gitopsservices.pipelines.openshift.io"]'
        operators.operatorframework.io/project_layout: go.kubebuilder.io/v4
        repository: https://github.com/redhat-developer/gitops-operator
        support: Red Hat
      apiServiceDefinitions: {}
      crdDescriptions:
        owned:
          - description: An AnalysisRun is an instantiation of an AnalysisTemplate. AnalysisRuns are like Jobs in that they eventually complete.
            displayName: AnalysisRun
            kind: AnalysisRun
            name: analysisruns.argoproj.io
            version: v1alpha1
          - description: An AnalysisTemplate is a template spec which defines how to perform a canary analysis, such as the metrics, its frequency, and the values which are considered successful or failed.
            displayName: AnalysisTemplate
            kind: AnalysisTemplate
            name: analysistemplates.argoproj.io
            version: v1alpha1
          - description: An Application is a group of Kubernetes resources as defined by a manifest.
            displayName: Application
            kind: Application
            name: applications.argoproj.io
            version: v1alpha1
          - description: ApplicationSet is the representation of an ApplicationSet controller deployment.
            displayName: ApplicationSet
            kind: ApplicationSet
            name: applicationsets.argoproj.io
            version: v1alpha1
          - description: An AppProject is a logical grouping of Argo CD Applications.
            displayName: AppProject
            kind: AppProject
            name: appprojects.argoproj.io
            version: v1alpha1
          - kind: ArgoCD
            name: argocds.argoproj.io
            version: v1alpha1
          - description: Argo CD is the representation of an Argo CD deployment.
            displayName: Argo CD
            kind: ArgoCD
            name: argocds.argoproj.io
            resources:
              - kind: ArgoCD
                name: ""
                version: v1beta1
              - kind: ConfigMap
                name: ""
                version: v1
              - kind: CronJob
                name: ""
                version: v1
              - kind: Deployment
                name: ""
                version: v1
              - kind: Ingress
                name: ""
                version: v1
              - kind: Job
                name: ""
                version: v1
              - kind: PersistentVolumeClaim
                name: ""
                version: v1
              - kind: Pod
                name: ""
                version: v1
              - kind: Prometheus
                name: ""
                version: v1
              - kind: ReplicaSet
                name: ""
                version: v1
              - kind: Route
                name: ""
                version: v1
              - kind: Secret
                name: ""
                version: v1
              - kind: Service
                name: ""
                version: v1
              - kind: ServiceMonitor
                name: ""
                version: v1
              - kind: StatefulSet
                name: ""
                version: v1
            version: v1beta1
          - description: A ClusterAnalysisTemplate is like an AnalysisTemplate,but it is not limited to its namespace. It can be used by any Rollout throughout the cluster.
            displayName: ClusterAnalysisTemplate
            kind: ClusterAnalysisTemplate
            name: clusteranalysistemplates.argoproj.io
            version: v1alpha1
          - description: An Experiment is limited run of one or more ReplicaSets for the purposes of analysis. Experiments typically run for a pre-determined duration, but can also run indefinitely until stopped.
            displayName: Experiment
            kind: Experiment
            name: experiments.argoproj.io
            version: v1alpha1
          - description: GitopsService is the Schema for the gitopsservices API
            displayName: Gitops Service
            kind: GitopsService
            name: gitopsservices.pipelines.openshift.io
            version: v1alpha1
          - description: NotificationsConfigurations contains the notification template used to generate notifications that notify users about important changes in the application state.
            displayName: NotificationsConfiguration
            kind: NotificationsConfiguration
            name: notificationsconfigurations.argoproj.io
            version: v1alpha1
          - description: A controller for managing Argo Rollouts
            displayName: RolloutManager
            kind: RolloutManager
            name: rolloutmanagers.argoproj.io
            version: v1alpha1
          - kind: Rollout
            name: rollouts.argoproj.io
            version: v1alpha1
      description: "Red Hat OpenShift GitOps is a declarative continuous delivery platform based on [Argo CD](https://argoproj.github.io/argo-cd/). It enables teams to adopt GitOps principles for managing cluster configurations and automating secure and repeatable application delivery across hybrid multi-cluster Kubernetes environments. Following GitOps and infrastructure as code principles, you can store the configuration of clusters and applications in Git repositories and use Git workflows to roll them out to the target clusters.\n\n## Features\n* Automated install and upgrades of Argo CD\n* Manual and automated configuration sync from Git repositories to target OpenShift and Kubernetes clusters\n* Support for the Helm and Kustomize templating tools\n* Configuration drift detection and visualization on live clusters\n* Audit trails of rollouts to the clusters\n* Monitoring and logging integration with OpenShift\n* Automated GitOps bootstrapping using Tekton and Argo CD with [GitOps Application Manager CLI](https://github.com/redhat-developer/kam)\n\n## Components\n* Argo CD stable\n* GitOps Application Manager CLI ([download](https://github.com/redhat-developer/kam/releases))\n\n## How to Install \nAfter installing the OpenShift GitOps operator, an instance  of Argo CD is installed in the `openshift-gitops` namespace which has sufficent privileges for managing cluster configurations. You can create additional Argo CD instances using the `ArgoCD` custom resource within the desired namespaces.\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ArgoCD\nmetadata:\n  name: argocd\nspec:\n  server:\n    route:\n      enabled: true\n```\n\nOpenShift GitOps is a layered product on top of OpenShift that enables teams to adopt GitOps principles for managing cluster configurations and automating secure and repeatable application delivery across hybrid multi-cluster Kubernetes environments. OpenShift GitOps is built around Argo CD as the core upstream project and assists customers to establish an end-to-end application delivery workflow on GitOps principles.\n"
      displayName: Red Hat OpenShift GitOps
      installModes:
        - supported: false
          type: OwnNamespace
        - supported: false
          type: SingleNamespace
        - supported: false
          type: MultiNamespace
        - supported: true
          type: AllNamespaces
      keywords:
        - devtools
        - gitops
        - pipelines
      labels:
        operatorframework.io/arch.amd64: supported
        operatorframework.io/arch.arm64: supported
        operatorframework.io/arch.ppc64le: supported
        operatorframework.io/arch.s390x: supported
        operatorframework.io/os.linux: supported
      links:
        - name: Release Notes
          url: https://docs.openshift.com/container-platform/4.10/cicd/gitops/gitops-release-notes.html
        - name: Day 1 Operations
          url: https://github.com/redhat-developer/kam/tree/master/docs/journey/day1
        - name: Day 2 Operations
          url: https://github.com/redhat-developer/kam/tree/master/docs/journey/day2
      maintainers:
        - email: team-gitops@redhat.com
          name: OpenShift GitOps Team
      maturity: GA
      provider:
        name: Red Hat Inc
relatedImages:
  - image: registry.redhat.io/openshift-gitops-1/argo-rollouts-rhel8@sha256:44475429eb08f0acfb08c35e65bd2870535634cf76156b870a3585b1cd4c8b30
    name: argo_rollouts_image
  - image: registry.redhat.io/openshift-gitops-1/argocd-rhel8@sha256:383963899a0c606386475f56adee23fc9c43f02a3fa817845d683e68b2ec8360
    name: argocd_image
  - image: registry.redhat.io/openshift-gitops-1/console-plugin-rhel8@sha256:b022c3859eb6bb5de60ce9760d0d9a23617bc9906a3487969c45604f9aeb5acc
    name: gitops_console_plugin_image
  - image: registry.redhat.io/openshift-gitops-1/dex-rhel8@sha256:bae83c4de42d55ca49cb443c0cbfb39a8318487d6d568a6aae03ca0b583eda64
    name: argocd_dex_image
  - image: registry.redhat.io/openshift-gitops-1/gitops-operator-bundle@sha256:610437902999bf406e6284a1f587e055e4ccc36cc4f83f3cf5aec2981843698b
    name: ""
  - image: registry.redhat.io/openshift-gitops-1/gitops-rhel8-operator@sha256:91588806c263e3cc10c5245c89785234b1d0fe44e04ee0c2645f30c34ccab3ea
    name: gitops-rhel8-operator-91588806c263e3cc10c5245c89785234b1d0fe44e04ee0c2645f30c34ccab3ea-annotation
  - image: registry.redhat.io/openshift-gitops-1/gitops-rhel8-operator@sha256:91588806c263e3cc10c5245c89785234b1d0fe44e04ee0c2645f30c34ccab3ea
    name: manager
  - image: registry.redhat.io/openshift-gitops-1/gitops-rhel8@sha256:7be504945c8b7ce6b7b6f232309f3fe15b8e78d8003ab6655523541c03309cab
    name: backend_image
  - image: registry.redhat.io/openshift-gitops-1/kam-delivery-rhel8@sha256:56f22d670b05fee32e91f0fbd5925b55351b4f6df621bc40b2719427df9df93b
    name: kam_image
  - image: registry.redhat.io/openshift-gitops-1/must-gather-rhel8@sha256:71c2a5a88f0b4d5f93cb669cc6d900d71ffb70d87b70b1f90bdfc909fabacb9b
    name: must_gather_image
  - image: registry.redhat.io/openshift4/ose-haproxy-router@sha256:7c6bb4a525964d9cdf1c64c646174f91273501dea93224cab5382f81533c6642
    name: argocd_redis_ha_proxy_image
  - image: registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:6a90baa81d2272e681a16a91deacdc1c212b00142b0d9736aff14f772f68be11
    name: kube_rbac_proxy_image
  - image: registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:f288292071ec742e0c420cc19b8abe0ab5d95c447f01ce800bf5bf434270b616
    name: kube-rbac-proxy
  - image: registry.redhat.io/rh-sso-7/sso76-openshift-rhel8@sha256:06a6637c4776f4285bcb295d327ee60b1aed61b7adc5f7ab52898d79281ced70
    name: argocd_keycloak_image
  - image: registry.redhat.io/rhel8/redis-6@sha256:a848cc4edb4405846c673187dd68ce66c328dd1ad42f193f5737288c7971399d
    name: argocd_redis_image
schema: olm.bundle
---
image: registry.redhat.io/openshift-gitops-1/gitops-operator-bundle@sha256:53daa863b16b421cc1d9bc7e042cf1ecce9de9913b978561145b319c2a1a8ae5
name: openshift-gitops-operator.v1.14.1
package: openshift-gitops-operator
properties:
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: AnalysisRun
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: AnalysisTemplate
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: AppProject
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: Application
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ApplicationSet
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ArgoCD
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ArgoCD
      version: v1beta1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ClusterAnalysisTemplate
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: Experiment
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: NotificationsConfiguration
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: Rollout
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: RolloutManager
      version: v1alpha1
  - type: olm.gvk
    value:
      group: pipelines.openshift.io
      kind: GitopsService
      version: v1alpha1
  - type: olm.package
    value:
      packageName: openshift-gitops-operator
      version: 1.14.1
  - type: olm.csv.metadata
    value:
      annotations:
        alm-examples: |-
          [
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "AppProject",
              "metadata": {
                "name": "example"
              },
              "spec": null
            },
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "Application",
              "metadata": {
                "name": "example"
              },
              "spec": null
            },
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "ApplicationSet",
              "metadata": {
                "name": "example"
              },
              "spec": null
            },
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "NotificationsConfiguration",
              "metadata": {
                "name": "default-notifications-configuration"
              },
              "spec": {
                "templates": {
                  "template.app-created": "email:\n  subject: Application {{.app.metadata.name}} has been created.\nmessage: Application {{.app.metadata.name}} has been created.\nteams:\n  title: Application {{.app.metadata.name}} has been created.",
                  "template.app-deleted": "email:\n  subject: Application {{.app.metadata.name}} has been deleted.\nmessage: Application {{.app.metadata.name}} has been deleted.\nteams:\n  title: Application {{.app.metadata.name}} has been deleted.",
                  "template.app-deployed": "email:\n  subject: New version of an application {{.app.metadata.name}} is up and running.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} is now running new version of deployments manifests.\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#18be52\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Revision\",\n        \"value\": \"{{.app.status.sync.revision}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    },\n    {\n      \"name\": \"Revision\",\n      \"value\": \"{{.app.status.sync.revision}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Operation Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#000080'\n  title: New version of an application {{.app.metadata.name}} is up and running.",
                  "template.app-health-degraded": "email:\n  subject: Application {{.app.metadata.name}} has degraded.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}} Application {{.app.metadata.name}} has degraded.\n  Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\": \"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#f4c030\",\n      \"fields\": [\n      {\n        \"title\": \"Health Status\",\n        \"value\": \"{{.app.status.health.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Health Status\",\n      \"value\": \"{{.app.status.health.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#FF0000'\n  title: Application {{.app.metadata.name}} has degraded.",
                  "template.app-sync-failed": "email:\n  subject: Failed to sync application {{.app.metadata.name}}.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}}  The sync operation of application {{.app.metadata.name}} has failed at {{.app.status.operationState.finishedAt}} with the following error: {{.app.status.operationState.message}}\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#E96D76\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Failed at\",\n      \"value\": \"{{.app.status.operationState.finishedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Operation\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#FF0000'\n  title: Failed to sync application {{.app.metadata.name}}.",
                  "template.app-sync-running": "email:\n  subject: Start syncing application {{.app.metadata.name}}.\nmessage: |\n  The sync operation of application {{.app.metadata.name}} has started at {{.app.status.operationState.startedAt}}.\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#0DADEA\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Started at\",\n      \"value\": \"{{.app.status.operationState.startedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Operation\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  title: Start syncing application {{.app.metadata.name}}.",
                  "template.app-sync-status-unknown": "email:\n  subject: Application {{.app.metadata.name}} sync status is 'Unknown'\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}} Application {{.app.metadata.name}} sync is 'Unknown'.\n  Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\n  {{if ne .serviceType \"slack\"}}\n  {{range $c := .app.status.conditions}}\n      * {{$c.message}}\n  {{end}}\n  {{end}}\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#E96D76\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  title: Application {{.app.metadata.name}} sync status is 'Unknown'",
                  "template.app-sync-succeeded": "email:\n  subject: Application {{.app.metadata.name}} has been successfully synced.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} has been successfully synced at {{.app.status.operationState.finishedAt}}.\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#18be52\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Synced at\",\n      \"value\": \"{{.app.status.operationState.finishedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Operation Details\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#000080'\n  title: Application {{.app.metadata.name}} has been successfully synced"
                },
                "triggers": {
                  "trigger.on-created": "- description: Application is created.\n  oncePer: app.metadata.name\n  send:\n  - app-created\n  when: \"true\"",
                  "trigger.on-deleted": "- description: Application is deleted.\n  oncePer: app.metadata.name\n  send:\n  - app-deleted\n  when: app.metadata.deletionTimestamp != nil",
                  "trigger.on-deployed": "- description: Application is synced and healthy. Triggered once per commit.\n  oncePer: app.status.operationState.syncResult.revision\n  send:\n  - app-deployed\n  when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status\n      == 'Healthy'",
                  "trigger.on-health-degraded": "- description: Application has degraded\n  send:\n  - app-health-degraded\n  when: app.status.health.status == 'Degraded'",
                  "trigger.on-sync-failed": "- description: Application syncing has failed\n  send:\n  - app-sync-failed\n  when: app.status.operationState.phase in ['Error', 'Failed']",
                  "trigger.on-sync-running": "- description: Application is being synced\n  send:\n  - app-sync-running\n  when: app.status.operationState.phase in ['Running']",
                  "trigger.on-sync-status-unknown": "- description: Application status is 'Unknown'\n  send:\n  - app-sync-status-unknown\n  when: app.status.sync.status == 'Unknown'",
                  "trigger.on-sync-succeeded": "- description: Application syncing has succeeded\n  send:\n  - app-sync-succeeded\n  when: app.status.operationState.phase in ['Succeeded']"
                }
              }
            },
            {
              "apiVersion": "argoproj.io/v1beta1",
              "kind": "ArgoCD",
              "metadata": {
                "name": "argocd"
              },
              "spec": {
                "controller": {
                  "resources": {
                    "limits": {
                      "cpu": "2000m",
                      "memory": "2048Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "1024Mi"
                    }
                  }
                },
                "ha": {
                  "enabled": false,
                  "resources": {
                    "limits": {
                      "cpu": "500m",
                      "memory": "256Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "128Mi"
                    }
                  }
                },
                "rbac": {
                  "defaultPolicy": "",
                  "policy": "g, system:cluster-admins, role:admin\n",
                  "scopes": "[groups]"
                },
                "redis": {
                  "resources": {
                    "limits": {
                      "cpu": "500m",
                      "memory": "256Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "128Mi"
                    }
                  }
                },
                "repo": {
                  "resources": {
                    "limits": {
                      "cpu": "1000m",
                      "memory": "1024Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "256Mi"
                    }
                  }
                },
                "resourceExclusions": "- apiGroups:\n  - tekton.dev\n  clusters:\n  - '*'\n  kinds:\n  - TaskRun\n  - PipelineRun        \n",
                "server": {
                  "resources": {
                    "limits": {
                      "cpu": "500m",
                      "memory": "256Mi"
                    },
                    "requests": {
                      "cpu": "125m",
                      "memory": "128Mi"
                    }
                  },
                  "route": {
                    "enabled": true
                  }
                },
                "sso": {
                  "dex": {
                    "openShiftOAuth": true,
                    "resources": {
                      "limits": {
                        "cpu": "500m",
                        "memory": "256Mi"
                      },
                      "requests": {
                        "cpu": "250m",
                        "memory": "128Mi"
                      }
                    }
                  },
                  "provider": "dex"
                }
              }
            },
            {
              "apiVersion": "pipelines.openshift.io/v1alpha1",
              "kind": "GitopsService",
              "metadata": {
                "name": "gitopsservice-sample"
              },
              "spec": null
            }
          ]
        capabilities: Deep Insights
        console.openshift.io/plugins: '["gitops-plugin"]'
        containerImage: registry.redhat.io/openshift-gitops-1/gitops-rhel8-operator@sha256:84d4226e3490f4c0f04b936e01b3b772093084815530cae97b868f4bf8b47a46
        createdAt: "2024-10-22 16:09:59"
        description: Enables teams to adopt GitOps principles for managing cluster configurations and application delivery across hybrid multi-cluster Kubernetes environments.
        features.operators.openshift.io/disconnected: "true"
        features.operators.openshift.io/fips-compliant: "false"
        features.operators.openshift.io/proxy-aware: "true"
        features.operators.openshift.io/tls-profiles: "false"
        features.operators.openshift.io/token-auth-aws: "false"
        features.operators.openshift.io/token-auth-azure: "false"
        features.operators.openshift.io/token-auth-gcp: "false"
        olm.skipRange: ""
        operatorframework.io/cluster-monitoring: "true"
        operatorframework.io/suggested-namespace: openshift-gitops-operator
        operators.openshift.io/infrastructure-features: '["disconnected"]'
        operators.openshift.io/valid-subscription: '["OpenShift Container Platform", "OpenShift Platform Plus"]'
        operators.operatorframework.io/builder: operator-sdk-v1.35.0
        operators.operatorframework.io/internal-objects: '["gitopsservices.pipelines.openshift.io"]'
        operators.operatorframework.io/project_layout: go.kubebuilder.io/v4
        repository: https://github.com/redhat-developer/gitops-operator
        support: Red Hat
      apiServiceDefinitions: {}
      crdDescriptions:
        owned:
          - description: An AnalysisRun is an instantiation of an AnalysisTemplate. AnalysisRuns are like Jobs in that they eventually complete.
            displayName: AnalysisRun
            kind: AnalysisRun
            name: analysisruns.argoproj.io
            version: v1alpha1
          - description: An AnalysisTemplate is a template spec which defines how to perform a canary analysis, such as the metrics, its frequency, and the values which are considered successful or failed.
            displayName: AnalysisTemplate
            kind: AnalysisTemplate
            name: analysistemplates.argoproj.io
            version: v1alpha1
          - description: An Application is a group of Kubernetes resources as defined by a manifest.
            displayName: Application
            kind: Application
            name: applications.argoproj.io
            version: v1alpha1
          - description: ApplicationSet is the representation of an ApplicationSet controller deployment.
            displayName: ApplicationSet
            kind: ApplicationSet
            name: applicationsets.argoproj.io
            version: v1alpha1
          - description: An AppProject is a logical grouping of Argo CD Applications.
            displayName: AppProject
            kind: AppProject
            name: appprojects.argoproj.io
            version: v1alpha1
          - kind: ArgoCD
            name: argocds.argoproj.io
            version: v1alpha1
          - description: Argo CD is the representation of an Argo CD deployment.
            displayName: Argo CD
            kind: ArgoCD
            name: argocds.argoproj.io
            resources:
              - kind: ArgoCD
                name: ""
                version: v1beta1
              - kind: ConfigMap
                name: ""
                version: v1
              - kind: CronJob
                name: ""
                version: v1
              - kind: Deployment
                name: ""
                version: v1
              - kind: Ingress
                name: ""
                version: v1
              - kind: Job
                name: ""
                version: v1
              - kind: PersistentVolumeClaim
                name: ""
                version: v1
              - kind: Pod
                name: ""
                version: v1
              - kind: Prometheus
                name: ""
                version: v1
              - kind: ReplicaSet
                name: ""
                version: v1
              - kind: Route
                name: ""
                version: v1
              - kind: Secret
                name: ""
                version: v1
              - kind: Service
                name: ""
                version: v1
              - kind: ServiceMonitor
                name: ""
                version: v1
              - kind: StatefulSet
                name: ""
                version: v1
            version: v1beta1
          - description: A ClusterAnalysisTemplate is like an AnalysisTemplate,but it is not limited to its namespace. It can be used by any Rollout throughout the cluster.
            displayName: ClusterAnalysisTemplate
            kind: ClusterAnalysisTemplate
            name: clusteranalysistemplates.argoproj.io
            version: v1alpha1
          - description: An Experiment is limited run of one or more ReplicaSets for the purposes of analysis. Experiments typically run for a pre-determined duration, but can also run indefinitely until stopped.
            displayName: Experiment
            kind: Experiment
            name: experiments.argoproj.io
            version: v1alpha1
          - description: GitopsService is the Schema for the gitopsservices API
            displayName: Gitops Service
            kind: GitopsService
            name: gitopsservices.pipelines.openshift.io
            version: v1alpha1
          - description: NotificationsConfigurations contains the notification template used to generate notifications that notify users about important changes in the application state.
            displayName: NotificationsConfiguration
            kind: NotificationsConfiguration
            name: notificationsconfigurations.argoproj.io
            version: v1alpha1
          - description: A controller for managing Argo Rollouts
            displayName: RolloutManager
            kind: RolloutManager
            name: rolloutmanagers.argoproj.io
            version: v1alpha1
          - kind: Rollout
            name: rollouts.argoproj.io
            version: v1alpha1
      description: "Red Hat OpenShift GitOps is a declarative continuous delivery platform based on [Argo CD](https://argoproj.github.io/argo-cd/). It enables teams to adopt GitOps principles for managing cluster configurations and automating secure and repeatable application delivery across hybrid multi-cluster Kubernetes environments. Following GitOps and infrastructure as code principles, you can store the configuration of clusters and applications in Git repositories and use Git workflows to roll them out to the target clusters.\n\n## Features\n* Automated install and upgrades of Argo CD\n* Manual and automated configuration sync from Git repositories to target OpenShift and Kubernetes clusters\n* Support for the Helm and Kustomize templating tools\n* Configuration drift detection and visualization on live clusters\n* Audit trails of rollouts to the clusters\n* Monitoring and logging integration with OpenShift\n* Automated GitOps bootstrapping using Tekton and Argo CD with [GitOps Application Manager CLI](https://github.com/redhat-developer/kam)\n\n## Components\n* Argo CD stable\n* GitOps Application Manager CLI ([download](https://github.com/redhat-developer/kam/releases))\n\n## How to Install \nAfter installing the OpenShift GitOps operator, an instance  of Argo CD is installed in the `openshift-gitops` namespace which has sufficent privileges for managing cluster configurations. You can create additional Argo CD instances using the `ArgoCD` custom resource within the desired namespaces.\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ArgoCD\nmetadata:\n  name: argocd\nspec:\n  server:\n    route:\n      enabled: true\n```\n\nOpenShift GitOps is a layered product on top of OpenShift that enables teams to adopt GitOps principles for managing cluster configurations and automating secure and repeatable application delivery across hybrid multi-cluster Kubernetes environments. OpenShift GitOps is built around Argo CD as the core upstream project and assists customers to establish an end-to-end application delivery workflow on GitOps principles.\n"
      displayName: Red Hat OpenShift GitOps
      installModes:
        - supported: false
          type: OwnNamespace
        - supported: false
          type: SingleNamespace
        - supported: false
          type: MultiNamespace
        - supported: true
          type: AllNamespaces
      keywords:
        - devtools
        - gitops
        - pipelines
      labels:
        operatorframework.io/arch.amd64: supported
        operatorframework.io/arch.arm64: supported
        operatorframework.io/arch.ppc64le: supported
        operatorframework.io/arch.s390x: supported
        operatorframework.io/os.linux: supported
      links:
        - name: Release Notes
          url: https://docs.redhat.com/en/documentation/red_hat_openshift_gitops/
        - name: Day 1 Operations
          url: https://github.com/redhat-developer/kam/tree/master/docs/journey/day1
        - name: Day 2 Operations
          url: https://github.com/redhat-developer/kam/tree/master/docs/journey/day2
      maintainers:
        - email: team-gitops@redhat.com
          name: OpenShift GitOps Team
      maturity: GA
      provider:
        name: Red Hat Inc
relatedImages:
  - image: registry.redhat.io/openshift-gitops-1/argo-rollouts-rhel8@sha256:f8106135dc58898f6b81d36e9158a192272e600d1db69ae207cb97dcd4eccb6f
    name: argo_rollouts_image
  - image: registry.redhat.io/openshift-gitops-1/argocd-rhel8@sha256:97914aa40ad6bc2f01e3eaac4448fbebe0ea0cb0f971b11f69581d545618fe8e
    name: argocd_image
  - image: registry.redhat.io/openshift-gitops-1/console-plugin-rhel8@sha256:df64830277b275211c369cf7f51cddf9cc1d753b1a78be42b2dcb1eddd2aba60
    name: gitops_console_plugin_image
  - image: registry.redhat.io/openshift-gitops-1/dex-rhel8@sha256:9116e1adc24db19136ea34b8faeba3b1003228621d81b716cbe4ec4d61ad6ffd
    name: argocd_dex_image
  - image: registry.redhat.io/openshift-gitops-1/gitops-operator-bundle@sha256:53daa863b16b421cc1d9bc7e042cf1ecce9de9913b978561145b319c2a1a8ae5
    name: ""
  - image: registry.redhat.io/openshift-gitops-1/gitops-rhel8-operator@sha256:84d4226e3490f4c0f04b936e01b3b772093084815530cae97b868f4bf8b47a46
    name: gitops-rhel8-operator-84d4226e3490f4c0f04b936e01b3b772093084815530cae97b868f4bf8b47a46-annotation
  - image: registry.redhat.io/openshift-gitops-1/gitops-rhel8-operator@sha256:84d4226e3490f4c0f04b936e01b3b772093084815530cae97b868f4bf8b47a46
    name: manager
  - image: registry.redhat.io/openshift-gitops-1/gitops-rhel8@sha256:ffbb287bde27ad176f9fe52b2cb52c323507c7d657be9d144e1d520c0415d3e9
    name: backend_image
  - image: registry.redhat.io/openshift-gitops-1/kam-delivery-rhel8@sha256:19ae5ec397baead9627b61fb5802692b37148bacef897bbec829d92a6a8c67ef
    name: kam_image
  - image: registry.redhat.io/openshift-gitops-1/must-gather-rhel8@sha256:7fb645f868c9bf88f8bc1b7c8ff65a991bb9e7030b005020c241cf67aa474b8a
    name: must_gather_image
  - image: registry.redhat.io/openshift4/ose-haproxy-router@sha256:7c6bb4a525964d9cdf1c64c646174f91273501dea93224cab5382f81533c6642
    name: argocd_redis_ha_proxy_image
  - image: registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:6a90baa81d2272e681a16a91deacdc1c212b00142b0d9736aff14f772f68be11
    name: kube_rbac_proxy_image
  - image: registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:9e0fee30842a16d7b8a39d336123c80c5271cb2ceb50759fc7ee51a4ed09ceb3
    name: kube-rbac-proxy
  - image: registry.redhat.io/rh-sso-7/sso76-openshift-rhel8@sha256:06a6637c4776f4285bcb295d327ee60b1aed61b7adc5f7ab52898d79281ced70
    name: argocd_keycloak_image
  - image: registry.redhat.io/rhel8/redis-6@sha256:a848cc4edb4405846c673187dd68ce66c328dd1ad42f193f5737288c7971399d
    name: argocd_redis_image
schema: olm.bundle
---
image: registry.redhat.io/openshift-gitops-1/gitops-operator-bundle@sha256:d23d78b4cf03a3349733c249fc5b835f105227a19044ab1e99bbba8d30522595
name: openshift-gitops-operator.v1.14.2-0.1738140086.p
package: openshift-gitops-operator
properties:
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: AnalysisRun
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: AnalysisTemplate
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: AppProject
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: Application
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ApplicationSet
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ArgoCD
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ArgoCD
      version: v1beta1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ClusterAnalysisTemplate
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: Experiment
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: NotificationsConfiguration
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: Rollout
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: RolloutManager
      version: v1alpha1
  - type: olm.gvk
    value:
      group: pipelines.openshift.io
      kind: GitopsService
      version: v1alpha1
  - type: olm.package
    value:
      packageName: openshift-gitops-operator
      version: 1.14.2+0.1738140086.p
  - type: olm.csv.metadata
    value:
      annotations:
        alm-examples: |-
          [
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "AppProject",
              "metadata": {
                "name": "example"
              },
              "spec": null
            },
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "Application",
              "metadata": {
                "name": "example"
              },
              "spec": null
            },
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "ApplicationSet",
              "metadata": {
                "name": "example"
              },
              "spec": null
            },
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "NotificationsConfiguration",
              "metadata": {
                "name": "default-notifications-configuration"
              },
              "spec": {
                "templates": {
                  "template.app-created": "email:\n  subject: Application {{.app.metadata.name}} has been created.\nmessage: Application {{.app.metadata.name}} has been created.\nteams:\n  title: Application {{.app.metadata.name}} has been created.",
                  "template.app-deleted": "email:\n  subject: Application {{.app.metadata.name}} has been deleted.\nmessage: Application {{.app.metadata.name}} has been deleted.\nteams:\n  title: Application {{.app.metadata.name}} has been deleted.",
                  "template.app-deployed": "email:\n  subject: New version of an application {{.app.metadata.name}} is up and running.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} is now running new version of deployments manifests.\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#18be52\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Revision\",\n        \"value\": \"{{.app.status.sync.revision}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    },\n    {\n      \"name\": \"Revision\",\n      \"value\": \"{{.app.status.sync.revision}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Operation Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#000080'\n  title: New version of an application {{.app.metadata.name}} is up and running.",
                  "template.app-health-degraded": "email:\n  subject: Application {{.app.metadata.name}} has degraded.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}} Application {{.app.metadata.name}} has degraded.\n  Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\": \"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#f4c030\",\n      \"fields\": [\n      {\n        \"title\": \"Health Status\",\n        \"value\": \"{{.app.status.health.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Health Status\",\n      \"value\": \"{{.app.status.health.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#FF0000'\n  title: Application {{.app.metadata.name}} has degraded.",
                  "template.app-sync-failed": "email:\n  subject: Failed to sync application {{.app.metadata.name}}.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}}  The sync operation of application {{.app.metadata.name}} has failed at {{.app.status.operationState.finishedAt}} with the following error: {{.app.status.operationState.message}}\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#E96D76\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Failed at\",\n      \"value\": \"{{.app.status.operationState.finishedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Operation\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#FF0000'\n  title: Failed to sync application {{.app.metadata.name}}.",
                  "template.app-sync-running": "email:\n  subject: Start syncing application {{.app.metadata.name}}.\nmessage: |\n  The sync operation of application {{.app.metadata.name}} has started at {{.app.status.operationState.startedAt}}.\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#0DADEA\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Started at\",\n      \"value\": \"{{.app.status.operationState.startedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Operation\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  title: Start syncing application {{.app.metadata.name}}.",
                  "template.app-sync-status-unknown": "email:\n  subject: Application {{.app.metadata.name}} sync status is 'Unknown'\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}} Application {{.app.metadata.name}} sync is 'Unknown'.\n  Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\n  {{if ne .serviceType \"slack\"}}\n  {{range $c := .app.status.conditions}}\n      * {{$c.message}}\n  {{end}}\n  {{end}}\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#E96D76\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  title: Application {{.app.metadata.name}} sync status is 'Unknown'",
                  "template.app-sync-succeeded": "email:\n  subject: Application {{.app.metadata.name}} has been successfully synced.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} has been successfully synced at {{.app.status.operationState.finishedAt}}.\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#18be52\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Synced at\",\n      \"value\": \"{{.app.status.operationState.finishedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Operation Details\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#000080'\n  title: Application {{.app.metadata.name}} has been successfully synced"
                },
                "triggers": {
                  "trigger.on-created": "- description: Application is created.\n  oncePer: app.metadata.name\n  send:\n  - app-created\n  when: \"true\"",
                  "trigger.on-deleted": "- description: Application is deleted.\n  oncePer: app.metadata.name\n  send:\n  - app-deleted\n  when: app.metadata.deletionTimestamp != nil",
                  "trigger.on-deployed": "- description: Application is synced and healthy. Triggered once per commit.\n  oncePer: app.status.operationState.syncResult.revision\n  send:\n  - app-deployed\n  when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status\n      == 'Healthy'",
                  "trigger.on-health-degraded": "- description: Application has degraded\n  send:\n  - app-health-degraded\n  when: app.status.health.status == 'Degraded'",
                  "trigger.on-sync-failed": "- description: Application syncing has failed\n  send:\n  - app-sync-failed\n  when: app.status.operationState.phase in ['Error', 'Failed']",
                  "trigger.on-sync-running": "- description: Application is being synced\n  send:\n  - app-sync-running\n  when: app.status.operationState.phase in ['Running']",
                  "trigger.on-sync-status-unknown": "- description: Application status is 'Unknown'\n  send:\n  - app-sync-status-unknown\n  when: app.status.sync.status == 'Unknown'",
                  "trigger.on-sync-succeeded": "- description: Application syncing has succeeded\n  send:\n  - app-sync-succeeded\n  when: app.status.operationState.phase in ['Succeeded']"
                }
              }
            },
            {
              "apiVersion": "argoproj.io/v1beta1",
              "kind": "ArgoCD",
              "metadata": {
                "name": "argocd"
              },
              "spec": {
                "controller": {
                  "resources": {
                    "limits": {
                      "cpu": "2000m",
                      "memory": "2048Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "1024Mi"
                    }
                  }
                },
                "ha": {
                  "enabled": false,
                  "resources": {
                    "limits": {
                      "cpu": "500m",
                      "memory": "256Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "128Mi"
                    }
                  }
                },
                "rbac": {
                  "defaultPolicy": "",
                  "policy": "g, system:cluster-admins, role:admin\n",
                  "scopes": "[groups]"
                },
                "redis": {
                  "resources": {
                    "limits": {
                      "cpu": "500m",
                      "memory": "256Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "128Mi"
                    }
                  }
                },
                "repo": {
                  "resources": {
                    "limits": {
                      "cpu": "1000m",
                      "memory": "1024Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "256Mi"
                    }
                  }
                },
                "resourceExclusions": "- apiGroups:\n  - tekton.dev\n  clusters:\n  - '*'\n  kinds:\n  - TaskRun\n  - PipelineRun        \n",
                "server": {
                  "resources": {
                    "limits": {
                      "cpu": "500m",
                      "memory": "256Mi"
                    },
                    "requests": {
                      "cpu": "125m",
                      "memory": "128Mi"
                    }
                  },
                  "route": {
                    "enabled": true
                  }
                },
                "sso": {
                  "dex": {
                    "openShiftOAuth": true,
                    "resources": {
                      "limits": {
                        "cpu": "500m",
                        "memory": "256Mi"
                      },
                      "requests": {
                        "cpu": "250m",
                        "memory": "128Mi"
                      }
                    }
                  },
                  "provider": "dex"
                }
              }
            },
            {
              "apiVersion": "pipelines.openshift.io/v1alpha1",
              "kind": "GitopsService",
              "metadata": {
                "name": "gitopsservice-sample"
              },
              "spec": null
            }
          ]
        capabilities: Deep Insights
        console.openshift.io/plugins: '["gitops-plugin"]'
        containerImage: registry.redhat.io/openshift-gitops-1/gitops-rhel8-operator@sha256:73f13a5587bbfbea5a64bd3507120eb83b6be85088139c6d65a9aa9cd56e186a
        createdAt: "2024-11-15 04:13:36"
        description: Enables teams to adopt GitOps principles for managing cluster configurations and application delivery across hybrid multi-cluster Kubernetes environments.
        features.operators.openshift.io/disconnected: "true"
        features.operators.openshift.io/fips-compliant: "false"
        features.operators.openshift.io/proxy-aware: "true"
        features.operators.openshift.io/tls-profiles: "false"
        features.operators.openshift.io/token-auth-aws: "false"
        features.operators.openshift.io/token-auth-azure: "false"
        features.operators.openshift.io/token-auth-gcp: "false"
        olm.skipRange: ""
        olm.substitutesFor: openshift-gitops-operator.v1.14.2
        operatorframework.io/cluster-monitoring: "true"
        operatorframework.io/suggested-namespace: openshift-gitops-operator
        operators.openshift.io/infrastructure-features: '["disconnected"]'
        operators.openshift.io/valid-subscription: '["OpenShift Container Platform", "OpenShift Platform Plus"]'
        operators.operatorframework.io/builder: operator-sdk-v1.35.0
        operators.operatorframework.io/internal-objects: '["gitopsservices.pipelines.openshift.io"]'
        operators.operatorframework.io/project_layout: go.kubebuilder.io/v4
        repository: https://github.com/redhat-developer/gitops-operator
        support: Red Hat
      apiServiceDefinitions: {}
      crdDescriptions:
        owned:
          - description: An AnalysisRun is an instantiation of an AnalysisTemplate. AnalysisRuns are like Jobs in that they eventually complete.
            displayName: AnalysisRun
            kind: AnalysisRun
            name: analysisruns.argoproj.io
            version: v1alpha1
          - description: An AnalysisTemplate is a template spec which defines how to perform a canary analysis, such as the metrics, its frequency, and the values which are considered successful or failed.
            displayName: AnalysisTemplate
            kind: AnalysisTemplate
            name: analysistemplates.argoproj.io
            version: v1alpha1
          - description: An Application is a group of Kubernetes resources as defined by a manifest.
            displayName: Application
            kind: Application
            name: applications.argoproj.io
            version: v1alpha1
          - description: ApplicationSet is the representation of an ApplicationSet controller deployment.
            displayName: ApplicationSet
            kind: ApplicationSet
            name: applicationsets.argoproj.io
            version: v1alpha1
          - description: An AppProject is a logical grouping of Argo CD Applications.
            displayName: AppProject
            kind: AppProject
            name: appprojects.argoproj.io
            version: v1alpha1
          - kind: ArgoCD
            name: argocds.argoproj.io
            version: v1alpha1
          - description: Argo CD is the representation of an Argo CD deployment.
            displayName: Argo CD
            kind: ArgoCD
            name: argocds.argoproj.io
            resources:
              - kind: ArgoCD
                name: ""
                version: v1beta1
              - kind: ConfigMap
                name: ""
                version: v1
              - kind: CronJob
                name: ""
                version: v1
              - kind: Deployment
                name: ""
                version: v1
              - kind: Ingress
                name: ""
                version: v1
              - kind: Job
                name: ""
                version: v1
              - kind: PersistentVolumeClaim
                name: ""
                version: v1
              - kind: Pod
                name: ""
                version: v1
              - kind: Prometheus
                name: ""
                version: v1
              - kind: ReplicaSet
                name: ""
                version: v1
              - kind: Route
                name: ""
                version: v1
              - kind: Secret
                name: ""
                version: v1
              - kind: Service
                name: ""
                version: v1
              - kind: ServiceMonitor
                name: ""
                version: v1
              - kind: StatefulSet
                name: ""
                version: v1
            version: v1beta1
          - description: A ClusterAnalysisTemplate is like an AnalysisTemplate,but it is not limited to its namespace. It can be used by any Rollout throughout the cluster.
            displayName: ClusterAnalysisTemplate
            kind: ClusterAnalysisTemplate
            name: clusteranalysistemplates.argoproj.io
            version: v1alpha1
          - description: An Experiment is limited run of one or more ReplicaSets for the purposes of analysis. Experiments typically run for a pre-determined duration, but can also run indefinitely until stopped.
            displayName: Experiment
            kind: Experiment
            name: experiments.argoproj.io
            version: v1alpha1
          - description: GitopsService is the Schema for the gitopsservices API
            displayName: Gitops Service
            kind: GitopsService
            name: gitopsservices.pipelines.openshift.io
            version: v1alpha1
          - description: NotificationsConfigurations contains the notification template used to generate notifications that notify users about important changes in the application state.
            displayName: NotificationsConfiguration
            kind: NotificationsConfiguration
            name: notificationsconfigurations.argoproj.io
            version: v1alpha1
          - description: A controller for managing Argo Rollouts
            displayName: RolloutManager
            kind: RolloutManager
            name: rolloutmanagers.argoproj.io
            version: v1alpha1
          - kind: Rollout
            name: rollouts.argoproj.io
            version: v1alpha1
      description: "Red Hat OpenShift GitOps is a declarative continuous delivery platform based on [Argo CD](https://argoproj.github.io/argo-cd/). It enables teams to adopt GitOps principles for managing cluster configurations and automating secure and repeatable application delivery across hybrid multi-cluster Kubernetes environments. Following GitOps and infrastructure as code principles, you can store the configuration of clusters and applications in Git repositories and use Git workflows to roll them out to the target clusters.\n\n## Features\n* Automated install and upgrades of Argo CD\n* Manual and automated configuration sync from Git repositories to target OpenShift and Kubernetes clusters\n* Support for the Helm and Kustomize templating tools\n* Configuration drift detection and visualization on live clusters\n* Audit trails of rollouts to the clusters\n* Monitoring and logging integration with OpenShift\n* Automated GitOps bootstrapping using Tekton and Argo CD with [GitOps Application Manager CLI](https://github.com/redhat-developer/kam)\n\n## Components\n* Argo CD 2.12.7\n* GitOps Application Manager CLI ([download](https://github.com/redhat-developer/kam/releases))\n\n## How to Install \nAfter installing the OpenShift GitOps operator, an instance  of Argo CD is installed in the `openshift-gitops` namespace which has sufficent privileges for managing cluster configurations. You can create additional Argo CD instances using the `ArgoCD` custom resource within the desired namespaces.\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ArgoCD\nmetadata:\n  name: argocd\nspec:\n  server:\n    route:\n      enabled: true\n```\n\nOpenShift GitOps is a layered product on top of OpenShift that enables teams to adopt GitOps principles for managing cluster configurations and automating secure and repeatable application delivery across hybrid multi-cluster Kubernetes environments. OpenShift GitOps is built around Argo CD as the core upstream project and assists customers to establish an end-to-end application delivery workflow on GitOps principles.\n"
      displayName: Red Hat OpenShift GitOps
      installModes:
        - supported: false
          type: OwnNamespace
        - supported: false
          type: SingleNamespace
        - supported: false
          type: MultiNamespace
        - supported: true
          type: AllNamespaces
      keywords:
        - devtools
        - gitops
        - pipelines
      labels:
        operatorframework.io/arch.amd64: supported
        operatorframework.io/arch.arm64: supported
        operatorframework.io/arch.ppc64le: supported
        operatorframework.io/arch.s390x: supported
        operatorframework.io/os.linux: supported
      links:
        - name: Release Notes
          url: https://docs.redhat.com/en/documentation/red_hat_openshift_gitops/
        - name: Day 1 Operations
          url: https://github.com/redhat-developer/kam/tree/master/docs/journey/day1
        - name: Day 2 Operations
          url: https://github.com/redhat-developer/kam/tree/master/docs/journey/day2
      maintainers:
        - email: team-gitops@redhat.com
          name: OpenShift GitOps Team
      maturity: GA
      provider:
        name: Red Hat Inc
relatedImages:
  - image: registry.redhat.io/openshift-gitops-1/argo-rollouts-rhel8@sha256:384fc02125e83db1047480211392ed5ea29b4bc254a173cae347c71480a339ac
    name: argo_rollouts_image
  - image: registry.redhat.io/openshift-gitops-1/argocd-rhel8@sha256:706d5c99715eece77616135da2fbf90863b7aef17fd64ab03bf7dd20877490ec
    name: argocd_image
  - image: registry.redhat.io/openshift-gitops-1/console-plugin-rhel8@sha256:51a735ae58bff96f0d1273b9b9ecc7bef36803ba756279f1eb8926d84b71d896
    name: gitops_console_plugin_image
  - image: registry.redhat.io/openshift-gitops-1/dex-rhel8@sha256:5aad57bedf3a3e6b2f4c21446a4326efb76a16c6727a3d941e95fe60112580f2
    name: argocd_dex_image
  - image: registry.redhat.io/openshift-gitops-1/gitops-operator-bundle@sha256:d23d78b4cf03a3349733c249fc5b835f105227a19044ab1e99bbba8d30522595
    name: ""
  - image: registry.redhat.io/openshift-gitops-1/gitops-rhel8-operator@sha256:73f13a5587bbfbea5a64bd3507120eb83b6be85088139c6d65a9aa9cd56e186a
    name: gitops-rhel8-operator-73f13a5587bbfbea5a64bd3507120eb83b6be85088139c6d65a9aa9cd56e186a-annotation
  - image: registry.redhat.io/openshift-gitops-1/gitops-rhel8-operator@sha256:73f13a5587bbfbea5a64bd3507120eb83b6be85088139c6d65a9aa9cd56e186a
    name: manager
  - image: registry.redhat.io/openshift-gitops-1/gitops-rhel8@sha256:93698c7fe8c0d1120a9cc3e451c3d46adb3a60c0e0ba09cf06a3c83f915b9cdd
    name: backend_image
  - image: registry.redhat.io/openshift-gitops-1/kam-delivery-rhel8@sha256:c99a697826257ecaae50c20a0e0da188bb97d506de749580a5d291a9410ce8a7
    name: kam_image
  - image: registry.redhat.io/openshift-gitops-1/must-gather-rhel8@sha256:0e4dee6469ff15e71c9925bebcb68510d2cb14662429f2bfea065bbc0b4cc316
    name: must_gather_image
  - image: registry.redhat.io/openshift4/ose-haproxy-router@sha256:7c6bb4a525964d9cdf1c64c646174f91273501dea93224cab5382f81533c6642
    name: argocd_redis_ha_proxy_image
  - image: registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:3f2804bc2af437ff1f06c214b48a1a780dfcfab995650d901c03270057eb9f3c
    name: kube-rbac-proxy
  - image: registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:6a90baa81d2272e681a16a91deacdc1c212b00142b0d9736aff14f772f68be11
    name: kube_rbac_proxy_image
  - image: registry.redhat.io/rh-sso-7/sso76-openshift-rhel8@sha256:06a6637c4776f4285bcb295d327ee60b1aed61b7adc5f7ab52898d79281ced70
    name: argocd_keycloak_image
  - image: registry.redhat.io/rhel8/redis-6@sha256:a848cc4edb4405846c673187dd68ce66c328dd1ad42f193f5737288c7971399d
    name: argocd_redis_image
schema: olm.bundle
---
image: registry.redhat.io/openshift-gitops-1/gitops-operator-bundle@sha256:ba442571ef9180765055f5224548c73e3da2be31731f8dd5b6b1beaf3e6732ee
name: openshift-gitops-operator.v1.14.3
package: openshift-gitops-operator
properties:
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: AnalysisRun
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: AnalysisTemplate
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: AppProject
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: Application
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ApplicationSet
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ArgoCD
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ArgoCD
      version: v1beta1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ClusterAnalysisTemplate
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: Experiment
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: NotificationsConfiguration
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: Rollout
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: RolloutManager
      version: v1alpha1
  - type: olm.gvk
    value:
      group: pipelines.openshift.io
      kind: GitopsService
      version: v1alpha1
  - type: olm.package
    value:
      packageName: openshift-gitops-operator
      version: 1.14.3
  - type: olm.csv.metadata
    value:
      annotations:
        alm-examples: |-
          [
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "AppProject",
              "metadata": {
                "name": "example"
              },
              "spec": null
            },
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "Application",
              "metadata": {
                "name": "example"
              },
              "spec": null
            },
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "ApplicationSet",
              "metadata": {
                "name": "example"
              },
              "spec": null
            },
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "NotificationsConfiguration",
              "metadata": {
                "name": "default-notifications-configuration"
              },
              "spec": {
                "templates": {
                  "template.app-created": "email:\n  subject: Application {{.app.metadata.name}} has been created.\nmessage: Application {{.app.metadata.name}} has been created.\nteams:\n  title: Application {{.app.metadata.name}} has been created.",
                  "template.app-deleted": "email:\n  subject: Application {{.app.metadata.name}} has been deleted.\nmessage: Application {{.app.metadata.name}} has been deleted.\nteams:\n  title: Application {{.app.metadata.name}} has been deleted.",
                  "template.app-deployed": "email:\n  subject: New version of an application {{.app.metadata.name}} is up and running.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} is now running new version of deployments manifests.\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#18be52\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Revision\",\n        \"value\": \"{{.app.status.sync.revision}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    },\n    {\n      \"name\": \"Revision\",\n      \"value\": \"{{.app.status.sync.revision}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Operation Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#000080'\n  title: New version of an application {{.app.metadata.name}} is up and running.",
                  "template.app-health-degraded": "email:\n  subject: Application {{.app.metadata.name}} has degraded.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}} Application {{.app.metadata.name}} has degraded.\n  Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\": \"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#f4c030\",\n      \"fields\": [\n      {\n        \"title\": \"Health Status\",\n        \"value\": \"{{.app.status.health.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Health Status\",\n      \"value\": \"{{.app.status.health.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#FF0000'\n  title: Application {{.app.metadata.name}} has degraded.",
                  "template.app-sync-failed": "email:\n  subject: Failed to sync application {{.app.metadata.name}}.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}}  The sync operation of application {{.app.metadata.name}} has failed at {{.app.status.operationState.finishedAt}} with the following error: {{.app.status.operationState.message}}\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#E96D76\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Failed at\",\n      \"value\": \"{{.app.status.operationState.finishedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Operation\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#FF0000'\n  title: Failed to sync application {{.app.metadata.name}}.",
                  "template.app-sync-running": "email:\n  subject: Start syncing application {{.app.metadata.name}}.\nmessage: |\n  The sync operation of application {{.app.metadata.name}} has started at {{.app.status.operationState.startedAt}}.\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#0DADEA\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Started at\",\n      \"value\": \"{{.app.status.operationState.startedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Operation\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  title: Start syncing application {{.app.metadata.name}}.",
                  "template.app-sync-status-unknown": "email:\n  subject: Application {{.app.metadata.name}} sync status is 'Unknown'\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}} Application {{.app.metadata.name}} sync is 'Unknown'.\n  Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\n  {{if ne .serviceType \"slack\"}}\n  {{range $c := .app.status.conditions}}\n      * {{$c.message}}\n  {{end}}\n  {{end}}\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#E96D76\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  title: Application {{.app.metadata.name}} sync status is 'Unknown'",
                  "template.app-sync-succeeded": "email:\n  subject: Application {{.app.metadata.name}} has been successfully synced.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} has been successfully synced at {{.app.status.operationState.finishedAt}}.\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#18be52\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Synced at\",\n      \"value\": \"{{.app.status.operationState.finishedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Operation Details\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#000080'\n  title: Application {{.app.metadata.name}} has been successfully synced"
                },
                "triggers": {
                  "trigger.on-created": "- description: Application is created.\n  oncePer: app.metadata.name\n  send:\n  - app-created\n  when: \"true\"",
                  "trigger.on-deleted": "- description: Application is deleted.\n  oncePer: app.metadata.name\n  send:\n  - app-deleted\n  when: app.metadata.deletionTimestamp != nil",
                  "trigger.on-deployed": "- description: Application is synced and healthy. Triggered once per commit.\n  oncePer: app.status.operationState.syncResult.revision\n  send:\n  - app-deployed\n  when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status\n      == 'Healthy'",
                  "trigger.on-health-degraded": "- description: Application has degraded\n  send:\n  - app-health-degraded\n  when: app.status.health.status == 'Degraded'",
                  "trigger.on-sync-failed": "- description: Application syncing has failed\n  send:\n  - app-sync-failed\n  when: app.status.operationState.phase in ['Error', 'Failed']",
                  "trigger.on-sync-running": "- description: Application is being synced\n  send:\n  - app-sync-running\n  when: app.status.operationState.phase in ['Running']",
                  "trigger.on-sync-status-unknown": "- description: Application status is 'Unknown'\n  send:\n  - app-sync-status-unknown\n  when: app.status.sync.status == 'Unknown'",
                  "trigger.on-sync-succeeded": "- description: Application syncing has succeeded\n  send:\n  - app-sync-succeeded\n  when: app.status.operationState.phase in ['Succeeded']"
                }
              }
            },
            {
              "apiVersion": "argoproj.io/v1beta1",
              "kind": "ArgoCD",
              "metadata": {
                "name": "argocd"
              },
              "spec": {
                "controller": {
                  "resources": {
                    "limits": {
                      "cpu": "2000m",
                      "memory": "2048Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "1024Mi"
                    }
                  }
                },
                "ha": {
                  "enabled": false,
                  "resources": {
                    "limits": {
                      "cpu": "500m",
                      "memory": "256Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "128Mi"
                    }
                  }
                },
                "rbac": {
                  "defaultPolicy": "",
                  "policy": "g, system:cluster-admins, role:admin\n",
                  "scopes": "[groups]"
                },
                "redis": {
                  "resources": {
                    "limits": {
                      "cpu": "500m",
                      "memory": "256Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "128Mi"
                    }
                  }
                },
                "repo": {
                  "resources": {
                    "limits": {
                      "cpu": "1000m",
                      "memory": "1024Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "256Mi"
                    }
                  }
                },
                "resourceExclusions": "- apiGroups:\n  - tekton.dev\n  clusters:\n  - '*'\n  kinds:\n  - TaskRun\n  - PipelineRun        \n",
                "server": {
                  "resources": {
                    "limits": {
                      "cpu": "500m",
                      "memory": "256Mi"
                    },
                    "requests": {
                      "cpu": "125m",
                      "memory": "128Mi"
                    }
                  },
                  "route": {
                    "enabled": true
                  }
                },
                "sso": {
                  "dex": {
                    "openShiftOAuth": true,
                    "resources": {
                      "limits": {
                        "cpu": "500m",
                        "memory": "256Mi"
                      },
                      "requests": {
                        "cpu": "250m",
                        "memory": "128Mi"
                      }
                    }
                  },
                  "provider": "dex"
                }
              }
            },
            {
              "apiVersion": "pipelines.openshift.io/v1alpha1",
              "kind": "GitopsService",
              "metadata": {
                "name": "gitopsservice-sample"
              },
              "spec": null
            }
          ]
        capabilities: Deep Insights
        console.openshift.io/plugins: '["gitops-plugin"]'
        containerImage: registry.redhat.io/openshift-gitops-1/gitops-rhel8-operator@sha256:69729008ec28bd01ad28af9ebd1c7b56324593c5febe54a0fabc3cea107c23a0
        createdAt: "2025-03-18 19:44:50"
        description: Enables teams to adopt GitOps principles for managing cluster configurations and application delivery across hybrid multi-cluster Kubernetes environments.
        features.operators.openshift.io/disconnected: "true"
        features.operators.openshift.io/fips-compliant: "false"
        features.operators.openshift.io/proxy-aware: "true"
        features.operators.openshift.io/tls-profiles: "false"
        features.operators.openshift.io/token-auth-aws: "false"
        features.operators.openshift.io/token-auth-azure: "false"
        features.operators.openshift.io/token-auth-gcp: "false"
        olm.skipRange: ""
        operatorframework.io/cluster-monitoring: "true"
        operatorframework.io/suggested-namespace: openshift-gitops-operator
        operators.openshift.io/infrastructure-features: '["disconnected"]'
        operators.openshift.io/valid-subscription: '["OpenShift Container Platform", "OpenShift Platform Plus"]'
        operators.operatorframework.io/builder: operator-sdk-v1.35.0
        operators.operatorframework.io/internal-objects: '["gitopsservices.pipelines.openshift.io"]'
        operators.operatorframework.io/project_layout: go.kubebuilder.io/v4
        repository: https://github.com/redhat-developer/gitops-operator
        support: Red Hat
      apiServiceDefinitions: {}
      crdDescriptions:
        owned:
          - description: An AnalysisRun is an instantiation of an AnalysisTemplate. AnalysisRuns are like Jobs in that they eventually complete.
            displayName: AnalysisRun
            kind: AnalysisRun
            name: analysisruns.argoproj.io
            version: v1alpha1
          - description: An AnalysisTemplate is a template spec which defines how to perform a canary analysis, such as the metrics, its frequency, and the values which are considered successful or failed.
            displayName: AnalysisTemplate
            kind: AnalysisTemplate
            name: analysistemplates.argoproj.io
            version: v1alpha1
          - description: An Application is a group of Kubernetes resources as defined by a manifest.
            displayName: Application
            kind: Application
            name: applications.argoproj.io
            version: v1alpha1
          - description: ApplicationSet is the representation of an ApplicationSet controller deployment.
            displayName: ApplicationSet
            kind: ApplicationSet
            name: applicationsets.argoproj.io
            version: v1alpha1
          - description: An AppProject is a logical grouping of Argo CD Applications.
            displayName: AppProject
            kind: AppProject
            name: appprojects.argoproj.io
            version: v1alpha1
          - kind: ArgoCD
            name: argocds.argoproj.io
            version: v1alpha1
          - description: Argo CD is the representation of an Argo CD deployment.
            displayName: Argo CD
            kind: ArgoCD
            name: argocds.argoproj.io
            resources:
              - kind: ArgoCD
                name: ""
                version: v1beta1
              - kind: ConfigMap
                name: ""
                version: v1
              - kind: CronJob
                name: ""
                version: v1
              - kind: Deployment
                name: ""
                version: v1
              - kind: Ingress
                name: ""
                version: v1
              - kind: Job
                name: ""
                version: v1
              - kind: PersistentVolumeClaim
                name: ""
                version: v1
              - kind: Pod
                name: ""
                version: v1
              - kind: Prometheus
                name: ""
                version: v1
              - kind: ReplicaSet
                name: ""
                version: v1
              - kind: Route
                name: ""
                version: v1
              - kind: Secret
                name: ""
                version: v1
              - kind: Service
                name: ""
                version: v1
              - kind: ServiceMonitor
                name: ""
                version: v1
              - kind: StatefulSet
                name: ""
                version: v1
            version: v1beta1
          - description: A ClusterAnalysisTemplate is like an AnalysisTemplate,but it is not limited to its namespace. It can be used by any Rollout throughout the cluster.
            displayName: ClusterAnalysisTemplate
            kind: ClusterAnalysisTemplate
            name: clusteranalysistemplates.argoproj.io
            version: v1alpha1
          - description: An Experiment is limited run of one or more ReplicaSets for the purposes of analysis. Experiments typically run for a pre-determined duration, but can also run indefinitely until stopped.
            displayName: Experiment
            kind: Experiment
            name: experiments.argoproj.io
            version: v1alpha1
          - description: GitopsService is the Schema for the gitopsservices API
            displayName: Gitops Service
            kind: GitopsService
            name: gitopsservices.pipelines.openshift.io
            version: v1alpha1
          - description: NotificationsConfigurations contains the notification template used to generate notifications that notify users about important changes in the application state.
            displayName: NotificationsConfiguration
            kind: NotificationsConfiguration
            name: notificationsconfigurations.argoproj.io
            version: v1alpha1
          - description: A controller for managing Argo Rollouts
            displayName: RolloutManager
            kind: RolloutManager
            name: rolloutmanagers.argoproj.io
            version: v1alpha1
          - kind: Rollout
            name: rollouts.argoproj.io
            version: v1alpha1
      description: "Red Hat OpenShift GitOps is a declarative continuous delivery platform based on [Argo CD](https://argoproj.github.io/argo-cd/). It enables teams to adopt GitOps principles for managing cluster configurations and automating secure and repeatable application delivery across hybrid multi-cluster Kubernetes environments. Following GitOps and infrastructure as code principles, you can store the configuration of clusters and applications in Git repositories and use Git workflows to roll them out to the target clusters.\n\n## Features\n* Automated install and upgrades of Argo CD\n* Manual and automated configuration sync from Git repositories to target OpenShift and Kubernetes clusters\n* Support for the Helm and Kustomize templating tools\n* Configuration drift detection and visualization on live clusters\n* Audit trails of rollouts to the clusters\n* Monitoring and logging integration with OpenShift\n* Automated GitOps bootstrapping using Tekton and Argo CD with [GitOps Application Manager CLI](https://github.com/redhat-developer/kam)\n\n## Components\n* Argo CD 2.12.10\n* GitOps Application Manager CLI ([download](https://github.com/redhat-developer/kam/releases))\n\n## How to Install \nAfter installing the OpenShift GitOps operator, an instance  of Argo CD is installed in the `openshift-gitops` namespace which has sufficent privileges for managing cluster configurations. You can create additional Argo CD instances using the `ArgoCD` custom resource within the desired namespaces.\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ArgoCD\nmetadata:\n  name: argocd\nspec:\n  server:\n    route:\n      enabled: true\n```\n\nOpenShift GitOps is a layered product on top of OpenShift that enables teams to adopt GitOps principles for managing cluster configurations and automating secure and repeatable application delivery across hybrid multi-cluster Kubernetes environments. OpenShift GitOps is built around Argo CD as the core upstream project and assists customers to establish an end-to-end application delivery workflow on GitOps principles.\n"
      displayName: Red Hat OpenShift GitOps
      installModes:
        - supported: false
          type: OwnNamespace
        - supported: false
          type: SingleNamespace
        - supported: false
          type: MultiNamespace
        - supported: true
          type: AllNamespaces
      keywords:
        - devtools
        - gitops
        - pipelines
      labels:
        operatorframework.io/arch.amd64: supported
        operatorframework.io/arch.arm64: supported
        operatorframework.io/arch.ppc64le: supported
        operatorframework.io/arch.s390x: supported
        operatorframework.io/os.linux: supported
      links:
        - name: Release Notes
          url: https://docs.redhat.com/en/documentation/red_hat_openshift_gitops/
        - name: Day 1 Operations
          url: https://github.com/redhat-developer/kam/tree/master/docs/journey/day1
        - name: Day 2 Operations
          url: https://github.com/redhat-developer/kam/tree/master/docs/journey/day2
      maintainers:
        - email: team-gitops@redhat.com
          name: OpenShift GitOps Team
      maturity: GA
      provider:
        name: Red Hat Inc
relatedImages:
  - image: registry.redhat.io/openshift-gitops-1/argo-rollouts-rhel8@sha256:8863dded445b5a057cbaffe5bf9fc6faf683131af3ca91fcb8d7104bf6cf5632
    name: argo_rollouts_image
  - image: registry.redhat.io/openshift-gitops-1/argocd-rhel8@sha256:e691e69e80d6c865fffea9dc4613aa075365444dd6ea6a068a390c59b0a52878
    name: argocd_image
  - image: registry.redhat.io/openshift-gitops-1/console-plugin-rhel8@sha256:e5a2bf079af40e4476fc00b0ae49df3c6d2dace2cd33b3c062257b6e3f2bf89f
    name: gitops_console_plugin_image
  - image: registry.redhat.io/openshift-gitops-1/dex-rhel8@sha256:8ed6b233c30fba4e73ebcb914238570a6ac73282e29af4cccb20c70800297ba6
    name: argocd_dex_image
  - image: registry.redhat.io/openshift-gitops-1/gitops-operator-bundle@sha256:ba442571ef9180765055f5224548c73e3da2be31731f8dd5b6b1beaf3e6732ee
    name: ""
  - image: registry.redhat.io/openshift-gitops-1/gitops-rhel8-operator@sha256:69729008ec28bd01ad28af9ebd1c7b56324593c5febe54a0fabc3cea107c23a0
    name: gitops-rhel8-operator-69729008ec28bd01ad28af9ebd1c7b56324593c5febe54a0fabc3cea107c23a0-annotation
  - image: registry.redhat.io/openshift-gitops-1/gitops-rhel8-operator@sha256:69729008ec28bd01ad28af9ebd1c7b56324593c5febe54a0fabc3cea107c23a0
    name: manager
  - image: registry.redhat.io/openshift-gitops-1/gitops-rhel8@sha256:fd73ed8a57a3c65c923c13e97996673a8907725ab26fde36bf87dd3d68ef41fe
    name: backend_image
  - image: registry.redhat.io/openshift-gitops-1/kam-delivery-rhel8@sha256:61d5a2356e9f41ef296d5a4987a52df2418dc034562f5bf79c4f162714d814ad
    name: kam_image
  - image: registry.redhat.io/openshift-gitops-1/must-gather-rhel8@sha256:245270d64a69cf2b65a30320ee0cbf4622f02f40d919c838d02ad6b42792fee2
    name: must_gather_image
  - image: registry.redhat.io/openshift4/ose-haproxy-router@sha256:be4eb8b8d0e1f67b0b420666f9621c7bbcbec1137fa731c4fe542ca789fac9e1
    name: argocd_redis_ha_proxy_image
  - image: registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:535832825409c5ff6207e37ac60b1fe8c2661073612868933f9ae27b5c399d5d
    name: kube-rbac-proxy
  - image: registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:a47afaa5ae506ec5a2c18818822f8cd626055168ead3183fb41a7e4338f8517e
    name: kube_rbac_proxy_image
  - image: registry.redhat.io/rh-sso-7/sso76-openshift-rhel8@sha256:71cccf38513491b0e46a3c40a10a94f5bedadf3c4c295b2faab9c7ba13ac4bf5
    name: argocd_keycloak_image
  - image: registry.redhat.io/rhel8/redis-6@sha256:109574014c1553a00839c6dc727232f34025b0aa918cc0c8f1639a4a04d9f6f0
    name: argocd_redis_image
schema: olm.bundle
---
image: registry.redhat.io/openshift-gitops-1/gitops-operator-bundle@sha256:17dc1380c8974b404745300420f3d64d3797db1b335351a38f4b2e8492da624c
name: openshift-gitops-operator.v1.15.0-0.1738074324.p
package: openshift-gitops-operator
properties:
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: AnalysisRun
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: AnalysisTemplate
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: AppProject
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: Application
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ApplicationSet
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ArgoCD
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ArgoCD
      version: v1beta1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ClusterAnalysisTemplate
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: Experiment
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: NotificationsConfiguration
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: Rollout
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: RolloutManager
      version: v1alpha1
  - type: olm.gvk
    value:
      group: pipelines.openshift.io
      kind: GitopsService
      version: v1alpha1
  - type: olm.package
    value:
      packageName: openshift-gitops-operator
      version: 1.15.0+0.1738074324.p
  - type: olm.csv.metadata
    value:
      annotations:
        alm-examples: |-
          [
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "AppProject",
              "metadata": {
                "name": "example"
              },
              "spec": null
            },
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "Application",
              "metadata": {
                "name": "example"
              },
              "spec": null
            },
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "ApplicationSet",
              "metadata": {
                "name": "example"
              },
              "spec": null
            },
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "NotificationsConfiguration",
              "metadata": {
                "name": "default-notifications-configuration"
              },
              "spec": {
                "templates": {
                  "template.app-created": "email:\n  subject: Application {{.app.metadata.name}} has been created.\nmessage: Application {{.app.metadata.name}} has been created.\nteams:\n  title: Application {{.app.metadata.name}} has been created.",
                  "template.app-deleted": "email:\n  subject: Application {{.app.metadata.name}} has been deleted.\nmessage: Application {{.app.metadata.name}} has been deleted.\nteams:\n  title: Application {{.app.metadata.name}} has been deleted.",
                  "template.app-deployed": "email:\n  subject: New version of an application {{.app.metadata.name}} is up and running.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} is now running new version of deployments manifests.\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#18be52\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Revision\",\n        \"value\": \"{{.app.status.sync.revision}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    },\n    {\n      \"name\": \"Revision\",\n      \"value\": \"{{.app.status.sync.revision}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Operation Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#000080'\n  title: New version of an application {{.app.metadata.name}} is up and running.",
                  "template.app-health-degraded": "email:\n  subject: Application {{.app.metadata.name}} has degraded.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}} Application {{.app.metadata.name}} has degraded.\n  Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\": \"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#f4c030\",\n      \"fields\": [\n      {\n        \"title\": \"Health Status\",\n        \"value\": \"{{.app.status.health.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Health Status\",\n      \"value\": \"{{.app.status.health.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#FF0000'\n  title: Application {{.app.metadata.name}} has degraded.",
                  "template.app-sync-failed": "email:\n  subject: Failed to sync application {{.app.metadata.name}}.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}}  The sync operation of application {{.app.metadata.name}} has failed at {{.app.status.operationState.finishedAt}} with the following error: {{.app.status.operationState.message}}\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#E96D76\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Failed at\",\n      \"value\": \"{{.app.status.operationState.finishedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Operation\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#FF0000'\n  title: Failed to sync application {{.app.metadata.name}}.",
                  "template.app-sync-running": "email:\n  subject: Start syncing application {{.app.metadata.name}}.\nmessage: |\n  The sync operation of application {{.app.metadata.name}} has started at {{.app.status.operationState.startedAt}}.\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#0DADEA\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Started at\",\n      \"value\": \"{{.app.status.operationState.startedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Operation\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  title: Start syncing application {{.app.metadata.name}}.",
                  "template.app-sync-status-unknown": "email:\n  subject: Application {{.app.metadata.name}} sync status is 'Unknown'\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}} Application {{.app.metadata.name}} sync is 'Unknown'.\n  Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\n  {{if ne .serviceType \"slack\"}}\n  {{range $c := .app.status.conditions}}\n      * {{$c.message}}\n  {{end}}\n  {{end}}\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#E96D76\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  title: Application {{.app.metadata.name}} sync status is 'Unknown'",
                  "template.app-sync-succeeded": "email:\n  subject: Application {{.app.metadata.name}} has been successfully synced.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} has been successfully synced at {{.app.status.operationState.finishedAt}}.\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#18be52\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Synced at\",\n      \"value\": \"{{.app.status.operationState.finishedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Operation Details\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#000080'\n  title: Application {{.app.metadata.name}} has been successfully synced"
                },
                "triggers": {
                  "trigger.on-created": "- description: Application is created.\n  oncePer: app.metadata.name\n  send:\n  - app-created\n  when: \"true\"",
                  "trigger.on-deleted": "- description: Application is deleted.\n  oncePer: app.metadata.name\n  send:\n  - app-deleted\n  when: app.metadata.deletionTimestamp != nil",
                  "trigger.on-deployed": "- description: Application is synced and healthy. Triggered once per commit.\n  oncePer: app.status.operationState.syncResult.revision\n  send:\n  - app-deployed\n  when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status\n      == 'Healthy'",
                  "trigger.on-health-degraded": "- description: Application has degraded\n  send:\n  - app-health-degraded\n  when: app.status.health.status == 'Degraded'",
                  "trigger.on-sync-failed": "- description: Application syncing has failed\n  send:\n  - app-sync-failed\n  when: app.status.operationState.phase in ['Error', 'Failed']",
                  "trigger.on-sync-running": "- description: Application is being synced\n  send:\n  - app-sync-running\n  when: app.status.operationState.phase in ['Running']",
                  "trigger.on-sync-status-unknown": "- description: Application status is 'Unknown'\n  send:\n  - app-sync-status-unknown\n  when: app.status.sync.status == 'Unknown'",
                  "trigger.on-sync-succeeded": "- description: Application syncing has succeeded\n  send:\n  - app-sync-succeeded\n  when: app.status.operationState.phase in ['Succeeded']"
                }
              }
            },
            {
              "apiVersion": "argoproj.io/v1beta1",
              "kind": "ArgoCD",
              "metadata": {
                "name": "argocd"
              },
              "spec": {
                "controller": {
                  "resources": {
                    "limits": {
                      "cpu": "2000m",
                      "memory": "2048Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "1024Mi"
                    }
                  }
                },
                "ha": {
                  "enabled": false,
                  "resources": {
                    "limits": {
                      "cpu": "500m",
                      "memory": "256Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "128Mi"
                    }
                  }
                },
                "rbac": {
                  "defaultPolicy": "",
                  "policy": "g, system:cluster-admins, role:admin\n",
                  "scopes": "[groups]"
                },
                "redis": {
                  "resources": {
                    "limits": {
                      "cpu": "500m",
                      "memory": "256Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "128Mi"
                    }
                  }
                },
                "repo": {
                  "resources": {
                    "limits": {
                      "cpu": "1000m",
                      "memory": "1024Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "256Mi"
                    }
                  }
                },
                "resourceExclusions": "- apiGroups:\n  - tekton.dev\n  clusters:\n  - '*'\n  kinds:\n  - TaskRun\n  - PipelineRun        \n",
                "server": {
                  "resources": {
                    "limits": {
                      "cpu": "500m",
                      "memory": "256Mi"
                    },
                    "requests": {
                      "cpu": "125m",
                      "memory": "128Mi"
                    }
                  },
                  "route": {
                    "enabled": true
                  }
                },
                "sso": {
                  "dex": {
                    "openShiftOAuth": true,
                    "resources": {
                      "limits": {
                        "cpu": "500m",
                        "memory": "256Mi"
                      },
                      "requests": {
                        "cpu": "250m",
                        "memory": "128Mi"
                      }
                    }
                  },
                  "provider": "dex"
                }
              }
            },
            {
              "apiVersion": "pipelines.openshift.io/v1alpha1",
              "kind": "GitopsService",
              "metadata": {
                "name": "gitopsservice-sample"
              },
              "spec": null
            }
          ]
        capabilities: Deep Insights
        console.openshift.io/plugins: '["gitops-plugin"]'
        containerImage: registry.redhat.io/openshift-gitops-1/gitops-rhel8-operator@sha256:2a18db52d160d864f06acf9f995212779fb7c7ecd113363ef7205a7509d80c7f
        createdAt: "2024-12-11 20:11:50"
        description: Enables teams to adopt GitOps principles for managing cluster configurations and application delivery across hybrid multi-cluster Kubernetes environments.
        features.operators.openshift.io/disconnected: "true"
        features.operators.openshift.io/fips-compliant: "false"
        features.operators.openshift.io/proxy-aware: "true"
        features.operators.openshift.io/tls-profiles: "false"
        features.operators.openshift.io/token-auth-aws: "false"
        features.operators.openshift.io/token-auth-azure: "false"
        features.operators.openshift.io/token-auth-gcp: "false"
        olm.skipRange: '>=1.0.0 <1.15.0'
        olm.substitutesFor: openshift-gitops-operator.v1.15.0
        operatorframework.io/cluster-monitoring: "true"
        operatorframework.io/suggested-namespace: openshift-gitops-operator
        operators.openshift.io/infrastructure-features: '["disconnected"]'
        operators.openshift.io/valid-subscription: '["OpenShift Container Platform", "OpenShift Platform Plus"]'
        operators.operatorframework.io/builder: operator-sdk-v1.35.0
        operators.operatorframework.io/internal-objects: '["gitopsservices.pipelines.openshift.io"]'
        operators.operatorframework.io/project_layout: go.kubebuilder.io/v4
        repository: https://github.com/redhat-developer/gitops-operator
        support: Red Hat
      apiServiceDefinitions: {}
      crdDescriptions:
        owned:
          - description: An AnalysisRun is an instantiation of an AnalysisTemplate. AnalysisRuns are like Jobs in that they eventually complete.
            displayName: AnalysisRun
            kind: AnalysisRun
            name: analysisruns.argoproj.io
            version: v1alpha1
          - description: An AnalysisTemplate is a template spec which defines how to perform a canary analysis, such as the metrics, its frequency, and the values which are considered successful or failed.
            displayName: AnalysisTemplate
            kind: AnalysisTemplate
            name: analysistemplates.argoproj.io
            version: v1alpha1
          - description: An Application is a group of Kubernetes resources as defined by a manifest.
            displayName: Application
            kind: Application
            name: applications.argoproj.io
            version: v1alpha1
          - description: ApplicationSet is the representation of an ApplicationSet controller deployment.
            displayName: ApplicationSet
            kind: ApplicationSet
            name: applicationsets.argoproj.io
            version: v1alpha1
          - description: An AppProject is a logical grouping of Argo CD Applications.
            displayName: AppProject
            kind: AppProject
            name: appprojects.argoproj.io
            version: v1alpha1
          - kind: ArgoCD
            name: argocds.argoproj.io
            version: v1alpha1
          - description: Argo CD is the representation of an Argo CD deployment.
            displayName: Argo CD
            kind: ArgoCD
            name: argocds.argoproj.io
            resources:
              - kind: ArgoCD
                name: ""
                version: v1beta1
              - kind: ConfigMap
                name: ""
                version: v1
              - kind: CronJob
                name: ""
                version: v1
              - kind: Deployment
                name: ""
                version: v1
              - kind: Ingress
                name: ""
                version: v1
              - kind: Job
                name: ""
                version: v1
              - kind: PersistentVolumeClaim
                name: ""
                version: v1
              - kind: Pod
                name: ""
                version: v1
              - kind: Prometheus
                name: ""
                version: v1
              - kind: ReplicaSet
                name: ""
                version: v1
              - kind: Route
                name: ""
                version: v1
              - kind: Secret
                name: ""
                version: v1
              - kind: Service
                name: ""
                version: v1
              - kind: ServiceMonitor
                name: ""
                version: v1
              - kind: StatefulSet
                name: ""
                version: v1
            version: v1beta1
          - description: A ClusterAnalysisTemplate is like an AnalysisTemplate,but it is not limited to its namespace. It can be used by any Rollout throughout the cluster.
            displayName: ClusterAnalysisTemplate
            kind: ClusterAnalysisTemplate
            name: clusteranalysistemplates.argoproj.io
            version: v1alpha1
          - description: An Experiment is limited run of one or more ReplicaSets for the purposes of analysis. Experiments typically run for a pre-determined duration, but can also run indefinitely until stopped.
            displayName: Experiment
            kind: Experiment
            name: experiments.argoproj.io
            version: v1alpha1
          - description: GitopsService is the Schema for the gitopsservices API
            displayName: Gitops Service
            kind: GitopsService
            name: gitopsservices.pipelines.openshift.io
            version: v1alpha1
          - description: NotificationsConfigurations contains the notification template used to generate notifications that notify users about important changes in the application state.
            displayName: NotificationsConfiguration
            kind: NotificationsConfiguration
            name: notificationsconfigurations.argoproj.io
            version: v1alpha1
          - description: A controller for managing Argo Rollouts
            displayName: RolloutManager
            kind: RolloutManager
            name: rolloutmanagers.argoproj.io
            version: v1alpha1
          - kind: Rollout
            name: rollouts.argoproj.io
            version: v1alpha1
      description: "Red Hat OpenShift GitOps is a declarative continuous delivery platform based on [Argo CD](https://argoproj.github.io/argo-cd/). It enables teams to adopt GitOps principles for managing cluster configurations and automating secure and repeatable application delivery across hybrid multi-cluster Kubernetes environments. Following GitOps and infrastructure as code principles, you can store the configuration of clusters and applications in Git repositories and use Git workflows to roll them out to the target clusters.\n\n## Features\n* Automated install and upgrades of Argo CD\n* Manual and automated configuration sync from Git repositories to target OpenShift and Kubernetes clusters\n* Support for the Helm and Kustomize templating tools\n* Configuration drift detection and visualization on live clusters\n* Audit trails of rollouts to the clusters\n* Monitoring and logging integration with OpenShift\n##Components\n* Argo CD stable\n\n## How to Install \nAfter installing the OpenShift GitOps operator, an instance  of Argo CD is installed in the `openshift-gitops` namespace which has sufficent privileges for managing cluster configurations. You can create additional Argo CD instances using the `ArgoCD` custom resource within the desired namespaces.\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ArgoCD\nmetadata:\n  name: argocd\nspec:\n  server:\n    route:\n      enabled: true\n```\n\nOpenShift GitOps is a layered product on top of OpenShift that enables teams to adopt GitOps principles for managing cluster configurations and automating secure and repeatable application delivery across hybrid multi-cluster Kubernetes environments. OpenShift GitOps is built around Argo CD as the core upstream project and assists customers to establish an end-to-end application delivery workflow on GitOps principles.\n"
      displayName: Red Hat OpenShift GitOps
      installModes:
        - supported: false
          type: OwnNamespace
        - supported: false
          type: SingleNamespace
        - supported: false
          type: MultiNamespace
        - supported: true
          type: AllNamespaces
      keywords:
        - devtools
        - gitops
        - pipelines
      labels:
        operatorframework.io/arch.amd64: supported
        operatorframework.io/arch.arm64: supported
        operatorframework.io/arch.ppc64le: supported
        operatorframework.io/arch.s390x: supported
        operatorframework.io/os.linux: supported
      maintainers:
        - email: team-gitops@redhat.com
          name: OpenShift GitOps Team
      maturity: GA
      provider:
        name: Red Hat Inc
relatedImages:
  - image: registry.redhat.io/openshift-gitops-1/argo-rollouts-rhel8@sha256:c698338c0b8c593cd6e79101b929543c5222b3bd09978d6a8f72095f10fd28c0
    name: argo_rollouts_image
  - image: registry.redhat.io/openshift-gitops-1/argocd-extensions-rhel8@sha256:6bfd32f9757aab4ec33b37a75f25ebaec7a18a00ece57a8d815cc6183854395b
    name: argocd_extension_image
  - image: registry.redhat.io/openshift-gitops-1/argocd-rhel8@sha256:2808a4a071a0ffa6960e40cdec1d2d2905d6116fe26c553612edabc7c2235a34
    name: argocd_image
  - image: registry.redhat.io/openshift-gitops-1/console-plugin-rhel8@sha256:fd740490fcb9e8885f6645098cdbdd95e5c208acf34e54ecbe7edc917febc183
    name: gitops_console_plugin_image
  - image: registry.redhat.io/openshift-gitops-1/dex-rhel8@sha256:d25c69ecbc7254d09ff3974ec741c290d19af7803e659feaa07b3098d9fec4dc
    name: argocd_dex_image
  - image: registry.redhat.io/openshift-gitops-1/gitops-operator-bundle@sha256:17dc1380c8974b404745300420f3d64d3797db1b335351a38f4b2e8492da624c
    name: ""
  - image: registry.redhat.io/openshift-gitops-1/gitops-rhel8-operator@sha256:2a18db52d160d864f06acf9f995212779fb7c7ecd113363ef7205a7509d80c7f
    name: gitops-rhel8-operator-2a18db52d160d864f06acf9f995212779fb7c7ecd113363ef7205a7509d80c7f-annotation
  - image: registry.redhat.io/openshift-gitops-1/gitops-rhel8-operator@sha256:2a18db52d160d864f06acf9f995212779fb7c7ecd113363ef7205a7509d80c7f
    name: manager
  - image: registry.redhat.io/openshift-gitops-1/gitops-rhel8@sha256:e8929708ec39a24ebf7c746bb1e767ad10a1ee11b10b1324b81895daf8859d1c
    name: backend_image
  - image: registry.redhat.io/openshift-gitops-1/must-gather-rhel8@sha256:43e347a90fd890601d1a5fe4536e8138615251bba584c7b8881ce7bb5ab090bd
    name: must_gather_image
  - image: registry.redhat.io/openshift4/ose-haproxy-router@sha256:7c6bb4a525964d9cdf1c64c646174f91273501dea93224cab5382f81533c6642
    name: argocd_redis_ha_proxy_image
  - image: registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:3f2804bc2af437ff1f06c214b48a1a780dfcfab995650d901c03270057eb9f3c
    name: kube-rbac-proxy
  - image: registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:6a90baa81d2272e681a16a91deacdc1c212b00142b0d9736aff14f772f68be11
    name: kube_rbac_proxy_image
  - image: registry.redhat.io/rh-sso-7/sso76-openshift-rhel8@sha256:06a6637c4776f4285bcb295d327ee60b1aed61b7adc5f7ab52898d79281ced70
    name: argocd_keycloak_image
  - image: registry.redhat.io/rhel8/redis-6@sha256:5250d644e80aea794b0f732e9285883a4348dace83557f177f64d78fe4dcabd0
    name: argocd_redis_image
schema: olm.bundle
---
image: registry.redhat.io/openshift-gitops-1/gitops-operator-bundle@sha256:8a0cde220937294ed559ee9dcbcdc840956270fdc66e917a0fe5f5971cf18f4e
name: openshift-gitops-operator.v1.15.1
package: openshift-gitops-operator
properties:
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: AnalysisRun
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: AnalysisTemplate
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: AppProject
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: Application
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ApplicationSet
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ArgoCD
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ArgoCD
      version: v1beta1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ClusterAnalysisTemplate
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: Experiment
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: NotificationsConfiguration
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: Rollout
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: RolloutManager
      version: v1alpha1
  - type: olm.gvk
    value:
      group: pipelines.openshift.io
      kind: GitopsService
      version: v1alpha1
  - type: olm.package
    value:
      packageName: openshift-gitops-operator
      version: 1.15.1
  - type: olm.csv.metadata
    value:
      annotations:
        alm-examples: |-
          [
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "AppProject",
              "metadata": {
                "name": "example"
              },
              "spec": null
            },
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "Application",
              "metadata": {
                "name": "example"
              },
              "spec": null
            },
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "ApplicationSet",
              "metadata": {
                "name": "example"
              },
              "spec": null
            },
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "NotificationsConfiguration",
              "metadata": {
                "name": "default-notifications-configuration"
              },
              "spec": {
                "templates": {
                  "template.app-created": "email:\n  subject: Application {{.app.metadata.name}} has been created.\nmessage: Application {{.app.metadata.name}} has been created.\nteams:\n  title: Application {{.app.metadata.name}} has been created.",
                  "template.app-deleted": "email:\n  subject: Application {{.app.metadata.name}} has been deleted.\nmessage: Application {{.app.metadata.name}} has been deleted.\nteams:\n  title: Application {{.app.metadata.name}} has been deleted.",
                  "template.app-deployed": "email:\n  subject: New version of an application {{.app.metadata.name}} is up and running.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} is now running new version of deployments manifests.\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#18be52\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Revision\",\n        \"value\": \"{{.app.status.sync.revision}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    },\n    {\n      \"name\": \"Revision\",\n      \"value\": \"{{.app.status.sync.revision}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Operation Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#000080'\n  title: New version of an application {{.app.metadata.name}} is up and running.",
                  "template.app-health-degraded": "email:\n  subject: Application {{.app.metadata.name}} has degraded.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}} Application {{.app.metadata.name}} has degraded.\n  Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\": \"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#f4c030\",\n      \"fields\": [\n      {\n        \"title\": \"Health Status\",\n        \"value\": \"{{.app.status.health.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Health Status\",\n      \"value\": \"{{.app.status.health.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#FF0000'\n  title: Application {{.app.metadata.name}} has degraded.",
                  "template.app-sync-failed": "email:\n  subject: Failed to sync application {{.app.metadata.name}}.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}}  The sync operation of application {{.app.metadata.name}} has failed at {{.app.status.operationState.finishedAt}} with the following error: {{.app.status.operationState.message}}\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#E96D76\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Failed at\",\n      \"value\": \"{{.app.status.operationState.finishedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Operation\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#FF0000'\n  title: Failed to sync application {{.app.metadata.name}}.",
                  "template.app-sync-running": "email:\n  subject: Start syncing application {{.app.metadata.name}}.\nmessage: |\n  The sync operation of application {{.app.metadata.name}} has started at {{.app.status.operationState.startedAt}}.\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#0DADEA\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Started at\",\n      \"value\": \"{{.app.status.operationState.startedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Operation\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  title: Start syncing application {{.app.metadata.name}}.",
                  "template.app-sync-status-unknown": "email:\n  subject: Application {{.app.metadata.name}} sync status is 'Unknown'\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}} Application {{.app.metadata.name}} sync is 'Unknown'.\n  Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\n  {{if ne .serviceType \"slack\"}}\n  {{range $c := .app.status.conditions}}\n      * {{$c.message}}\n  {{end}}\n  {{end}}\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#E96D76\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  title: Application {{.app.metadata.name}} sync status is 'Unknown'",
                  "template.app-sync-succeeded": "email:\n  subject: Application {{.app.metadata.name}} has been successfully synced.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} has been successfully synced at {{.app.status.operationState.finishedAt}}.\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#18be52\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Synced at\",\n      \"value\": \"{{.app.status.operationState.finishedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Operation Details\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#000080'\n  title: Application {{.app.metadata.name}} has been successfully synced"
                },
                "triggers": {
                  "trigger.on-created": "- description: Application is created.\n  oncePer: app.metadata.name\n  send:\n  - app-created\n  when: \"true\"",
                  "trigger.on-deleted": "- description: Application is deleted.\n  oncePer: app.metadata.name\n  send:\n  - app-deleted\n  when: app.metadata.deletionTimestamp != nil",
                  "trigger.on-deployed": "- description: Application is synced and healthy. Triggered once per commit.\n  oncePer: app.status.operationState.syncResult.revision\n  send:\n  - app-deployed\n  when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status\n      == 'Healthy'",
                  "trigger.on-health-degraded": "- description: Application has degraded\n  send:\n  - app-health-degraded\n  when: app.status.health.status == 'Degraded'",
                  "trigger.on-sync-failed": "- description: Application syncing has failed\n  send:\n  - app-sync-failed\n  when: app.status.operationState.phase in ['Error', 'Failed']",
                  "trigger.on-sync-running": "- description: Application is being synced\n  send:\n  - app-sync-running\n  when: app.status.operationState.phase in ['Running']",
                  "trigger.on-sync-status-unknown": "- description: Application status is 'Unknown'\n  send:\n  - app-sync-status-unknown\n  when: app.status.sync.status == 'Unknown'",
                  "trigger.on-sync-succeeded": "- description: Application syncing has succeeded\n  send:\n  - app-sync-succeeded\n  when: app.status.operationState.phase in ['Succeeded']"
                }
              }
            },
            {
              "apiVersion": "argoproj.io/v1beta1",
              "kind": "ArgoCD",
              "metadata": {
                "name": "argocd"
              },
              "spec": {
                "controller": {
                  "resources": {
                    "limits": {
                      "cpu": "2000m",
                      "memory": "2048Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "1024Mi"
                    }
                  }
                },
                "ha": {
                  "enabled": false,
                  "resources": {
                    "limits": {
                      "cpu": "500m",
                      "memory": "256Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "128Mi"
                    }
                  }
                },
                "rbac": {
                  "defaultPolicy": "",
                  "policy": "g, system:cluster-admins, role:admin\n",
                  "scopes": "[groups]"
                },
                "redis": {
                  "resources": {
                    "limits": {
                      "cpu": "500m",
                      "memory": "256Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "128Mi"
                    }
                  }
                },
                "repo": {
                  "resources": {
                    "limits": {
                      "cpu": "1000m",
                      "memory": "1024Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "256Mi"
                    }
                  }
                },
                "resourceExclusions": "- apiGroups:\n  - tekton.dev\n  clusters:\n  - '*'\n  kinds:\n  - TaskRun\n  - PipelineRun        \n",
                "server": {
                  "resources": {
                    "limits": {
                      "cpu": "500m",
                      "memory": "256Mi"
                    },
                    "requests": {
                      "cpu": "125m",
                      "memory": "128Mi"
                    }
                  },
                  "route": {
                    "enabled": true
                  }
                },
                "sso": {
                  "dex": {
                    "openShiftOAuth": true,
                    "resources": {
                      "limits": {
                        "cpu": "500m",
                        "memory": "256Mi"
                      },
                      "requests": {
                        "cpu": "250m",
                        "memory": "128Mi"
                      }
                    }
                  },
                  "provider": "dex"
                }
              }
            },
            {
              "apiVersion": "pipelines.openshift.io/v1alpha1",
              "kind": "GitopsService",
              "metadata": {
                "name": "gitopsservice-sample"
              },
              "spec": null
            }
          ]
        capabilities: Deep Insights
        console.openshift.io/plugins: '["gitops-plugin"]'
        containerImage: registry.redhat.io/openshift-gitops-1/gitops-rhel8-operator@sha256:ef8d7654505d37f8b6b1fc2b558292cd81dd8d478584929c87e596c91a92ca99
        createdAt: "2025-02-21 05:07:37"
        description: Enables teams to adopt GitOps principles for managing cluster configurations and application delivery across hybrid multi-cluster Kubernetes environments.
        features.operators.openshift.io/disconnected: "true"
        features.operators.openshift.io/fips-compliant: "false"
        features.operators.openshift.io/proxy-aware: "true"
        features.operators.openshift.io/tls-profiles: "false"
        features.operators.openshift.io/token-auth-aws: "false"
        features.operators.openshift.io/token-auth-azure: "false"
        features.operators.openshift.io/token-auth-gcp: "false"
        olm.skipRange: ""
        operatorframework.io/cluster-monitoring: "true"
        operatorframework.io/suggested-namespace: openshift-gitops-operator
        operators.openshift.io/infrastructure-features: '["disconnected"]'
        operators.openshift.io/valid-subscription: '["OpenShift Container Platform", "OpenShift Platform Plus"]'
        operators.operatorframework.io/builder: operator-sdk-v1.35.0
        operators.operatorframework.io/internal-objects: '["gitopsservices.pipelines.openshift.io"]'
        operators.operatorframework.io/project_layout: go.kubebuilder.io/v4
        repository: https://github.com/redhat-developer/gitops-operator
        support: Red Hat
      apiServiceDefinitions: {}
      crdDescriptions:
        owned:
          - description: An AnalysisRun is an instantiation of an AnalysisTemplate. AnalysisRuns are like Jobs in that they eventually complete.
            displayName: AnalysisRun
            kind: AnalysisRun
            name: analysisruns.argoproj.io
            version: v1alpha1
          - description: An AnalysisTemplate is a template spec which defines how to perform a canary analysis, such as the metrics, its frequency, and the values which are considered successful or failed.
            displayName: AnalysisTemplate
            kind: AnalysisTemplate
            name: analysistemplates.argoproj.io
            version: v1alpha1
          - description: An Application is a group of Kubernetes resources as defined by a manifest.
            displayName: Application
            kind: Application
            name: applications.argoproj.io
            version: v1alpha1
          - description: ApplicationSet is the representation of an ApplicationSet controller deployment.
            displayName: ApplicationSet
            kind: ApplicationSet
            name: applicationsets.argoproj.io
            version: v1alpha1
          - description: An AppProject is a logical grouping of Argo CD Applications.
            displayName: AppProject
            kind: AppProject
            name: appprojects.argoproj.io
            version: v1alpha1
          - kind: ArgoCD
            name: argocds.argoproj.io
            version: v1alpha1
          - description: Argo CD is the representation of an Argo CD deployment.
            displayName: Argo CD
            kind: ArgoCD
            name: argocds.argoproj.io
            resources:
              - kind: ArgoCD
                name: ""
                version: v1beta1
              - kind: ConfigMap
                name: ""
                version: v1
              - kind: CronJob
                name: ""
                version: v1
              - kind: Deployment
                name: ""
                version: v1
              - kind: Ingress
                name: ""
                version: v1
              - kind: Job
                name: ""
                version: v1
              - kind: PersistentVolumeClaim
                name: ""
                version: v1
              - kind: Pod
                name: ""
                version: v1
              - kind: Prometheus
                name: ""
                version: v1
              - kind: ReplicaSet
                name: ""
                version: v1
              - kind: Route
                name: ""
                version: v1
              - kind: Secret
                name: ""
                version: v1
              - kind: Service
                name: ""
                version: v1
              - kind: ServiceMonitor
                name: ""
                version: v1
              - kind: StatefulSet
                name: ""
                version: v1
            version: v1beta1
          - description: A ClusterAnalysisTemplate is like an AnalysisTemplate,but it is not limited to its namespace. It can be used by any Rollout throughout the cluster.
            displayName: ClusterAnalysisTemplate
            kind: ClusterAnalysisTemplate
            name: clusteranalysistemplates.argoproj.io
            version: v1alpha1
          - description: An Experiment is limited run of one or more ReplicaSets for the purposes of analysis. Experiments typically run for a pre-determined duration, but can also run indefinitely until stopped.
            displayName: Experiment
            kind: Experiment
            name: experiments.argoproj.io
            version: v1alpha1
          - description: GitopsService is the Schema for the gitopsservices API
            displayName: Gitops Service
            kind: GitopsService
            name: gitopsservices.pipelines.openshift.io
            version: v1alpha1
          - description: NotificationsConfigurations contains the notification template used to generate notifications that notify users about important changes in the application state.
            displayName: NotificationsConfiguration
            kind: NotificationsConfiguration
            name: notificationsconfigurations.argoproj.io
            version: v1alpha1
          - description: A controller for managing Argo Rollouts
            displayName: RolloutManager
            kind: RolloutManager
            name: rolloutmanagers.argoproj.io
            version: v1alpha1
          - kind: Rollout
            name: rollouts.argoproj.io
            version: v1alpha1
      description: "Red Hat OpenShift GitOps is a declarative continuous delivery platform based on [Argo CD](https://argoproj.github.io/argo-cd/). It enables teams to adopt GitOps principles for managing cluster configurations and automating secure and repeatable application delivery across hybrid multi-cluster Kubernetes environments. Following GitOps and infrastructure as code principles, you can store the configuration of clusters and applications in Git repositories and use Git workflows to roll them out to the target clusters.\n\n## Features\n* Automated install and upgrades of Argo CD\n* Manual and automated configuration sync from Git repositories to target OpenShift and Kubernetes clusters\n* Support for the Helm and Kustomize templating tools\n* Configuration drift detection and visualization on live clusters\n* Audit trails of rollouts to the clusters\n* Monitoring and logging integration with OpenShift\n##Components\n* Argo CD 2.13.5\n\n## How to Install \nAfter installing the OpenShift GitOps operator, an instance  of Argo CD is installed in the `openshift-gitops` namespace which has sufficent privileges for managing cluster configurations. You can create additional Argo CD instances using the `ArgoCD` custom resource within the desired namespaces.\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ArgoCD\nmetadata:\n  name: argocd\nspec:\n  server:\n    route:\n      enabled: true\n```\n\nOpenShift GitOps is a layered product on top of OpenShift that enables teams to adopt GitOps principles for managing cluster configurations and automating secure and repeatable application delivery across hybrid multi-cluster Kubernetes environments. OpenShift GitOps is built around Argo CD as the core upstream project and assists customers to establish an end-to-end application delivery workflow on GitOps principles.\n"
      displayName: Red Hat OpenShift GitOps
      installModes:
        - supported: false
          type: OwnNamespace
        - supported: false
          type: SingleNamespace
        - supported: false
          type: MultiNamespace
        - supported: true
          type: AllNamespaces
      keywords:
        - devtools
        - gitops
        - pipelines
      labels:
        operatorframework.io/arch.amd64: supported
        operatorframework.io/arch.arm64: supported
        operatorframework.io/arch.ppc64le: supported
        operatorframework.io/arch.s390x: supported
        operatorframework.io/os.linux: supported
      maintainers:
        - email: team-gitops@redhat.com
          name: OpenShift GitOps Team
      maturity: GA
      provider:
        name: Red Hat Inc
relatedImages:
  - image: registry.redhat.io/openshift-gitops-1/argo-rollouts-rhel8@sha256:d8d8e5fa421295473eb8cfbc51fdb56367df15954c485ebc1f5374ddb3c55039
    name: argo_rollouts_image
  - image: registry.redhat.io/openshift-gitops-1/argocd-extensions-rhel8@sha256:de4152b1f4850267b0d0566cb9e5bd3908bbf1acd3f5d4a54a5d8d38b6bb8f7e
    name: argocd_extension_image
  - image: registry.redhat.io/openshift-gitops-1/argocd-rhel8@sha256:0e98d2a7ddbdbf585564451b602847fb8189a264d49a53ea825ed3a10718e266
    name: argocd_image
  - image: registry.redhat.io/openshift-gitops-1/console-plugin-rhel8@sha256:5d7cbdeb50feb6db73dbfb22b55f9f5147ebe977cb6fceae8b28b75e9ac48862
    name: gitops_console_plugin_image
  - image: registry.redhat.io/openshift-gitops-1/dex-rhel8@sha256:1097f8e706d37ce720dd5d99930c8ec4e2ded8c748b4df052177902aa6cba673
    name: argocd_dex_image
  - image: registry.redhat.io/openshift-gitops-1/gitops-operator-bundle@sha256:8a0cde220937294ed559ee9dcbcdc840956270fdc66e917a0fe5f5971cf18f4e
    name: ""
  - image: registry.redhat.io/openshift-gitops-1/gitops-rhel8-operator@sha256:ef8d7654505d37f8b6b1fc2b558292cd81dd8d478584929c87e596c91a92ca99
    name: gitops-rhel8-operator-ef8d7654505d37f8b6b1fc2b558292cd81dd8d478584929c87e596c91a92ca99-annotation
  - image: registry.redhat.io/openshift-gitops-1/gitops-rhel8-operator@sha256:ef8d7654505d37f8b6b1fc2b558292cd81dd8d478584929c87e596c91a92ca99
    name: manager
  - image: registry.redhat.io/openshift-gitops-1/gitops-rhel8@sha256:d7232daa5837cb8021a7a70b821d62cd89e8bc057e255fa1323aff8c25a98674
    name: backend_image
  - image: registry.redhat.io/openshift-gitops-1/must-gather-rhel8@sha256:0f6a86cf106c4b2f07cee9300ac3377531321e3ac8e251472a0d7df175f15d7d
    name: must_gather_image
  - image: registry.redhat.io/openshift4/ose-haproxy-router@sha256:be4eb8b8d0e1f67b0b420666f9621c7bbcbec1137fa731c4fe542ca789fac9e1
    name: argocd_redis_ha_proxy_image
  - image: registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:535832825409c5ff6207e37ac60b1fe8c2661073612868933f9ae27b5c399d5d
    name: kube-rbac-proxy
  - image: registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:a47afaa5ae506ec5a2c18818822f8cd626055168ead3183fb41a7e4338f8517e
    name: kube_rbac_proxy_image
  - image: registry.redhat.io/rh-sso-7/sso76-openshift-rhel8@sha256:a4e049bc3c3a122a93429f296417d5d30c4a82c9283550967536496174073cc2
    name: argocd_keycloak_image
  - image: registry.redhat.io/rhel8/redis-6@sha256:5aae6ed0346240c17e62fa32425f84a8ad45498a9599a61bcc324bd17b2e54ce
    name: argocd_redis_image
schema: olm.bundle
---
image: registry.redhat.io/openshift-gitops-1/gitops-operator-bundle@sha256:5102b7d404ab4cd1bfc2a19024c10e1a295ba610cbb16aa0c75f1bfe5c66bfd2
name: openshift-gitops-operator.v1.16.0
package: openshift-gitops-operator
properties:
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: AnalysisRun
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: AnalysisTemplate
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: AppProject
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: Application
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ApplicationSet
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ArgoCD
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ArgoCD
      version: v1beta1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ClusterAnalysisTemplate
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: Experiment
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: NotificationsConfiguration
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: Rollout
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: RolloutManager
      version: v1alpha1
  - type: olm.gvk
    value:
      group: pipelines.openshift.io
      kind: GitopsService
      version: v1alpha1
  - type: olm.package
    value:
      packageName: openshift-gitops-operator
      version: 1.16.0
  - type: olm.csv.metadata
    value:
      annotations:
        alm-examples: |-
          [
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "AppProject",
              "metadata": {
                "name": "example"
              },
              "spec": null
            },
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "Application",
              "metadata": {
                "name": "example"
              },
              "spec": null
            },
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "ApplicationSet",
              "metadata": {
                "name": "example"
              },
              "spec": null
            },
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "NotificationsConfiguration",
              "metadata": {
                "name": "default-notifications-configuration"
              },
              "spec": {
                "templates": {
                  "template.app-created": "email:\n  subject: Application {{.app.metadata.name}} has been created.\nmessage: Application {{.app.metadata.name}} has been created.\nteams:\n  title: Application {{.app.metadata.name}} has been created.",
                  "template.app-deleted": "email:\n  subject: Application {{.app.metadata.name}} has been deleted.\nmessage: Application {{.app.metadata.name}} has been deleted.\nteams:\n  title: Application {{.app.metadata.name}} has been deleted.",
                  "template.app-deployed": "email:\n  subject: New version of an application {{.app.metadata.name}} is up and running.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} is now running new version of deployments manifests.\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#18be52\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Revision\",\n        \"value\": \"{{.app.status.sync.revision}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    },\n    {\n      \"name\": \"Revision\",\n      \"value\": \"{{.app.status.sync.revision}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Operation Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#000080'\n  title: New version of an application {{.app.metadata.name}} is up and running.",
                  "template.app-health-degraded": "email:\n  subject: Application {{.app.metadata.name}} has degraded.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}} Application {{.app.metadata.name}} has degraded.\n  Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\": \"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#f4c030\",\n      \"fields\": [\n      {\n        \"title\": \"Health Status\",\n        \"value\": \"{{.app.status.health.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Health Status\",\n      \"value\": \"{{.app.status.health.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#FF0000'\n  title: Application {{.app.metadata.name}} has degraded.",
                  "template.app-sync-failed": "email:\n  subject: Failed to sync application {{.app.metadata.name}}.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}}  The sync operation of application {{.app.metadata.name}} has failed at {{.app.status.operationState.finishedAt}} with the following error: {{.app.status.operationState.message}}\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#E96D76\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Failed at\",\n      \"value\": \"{{.app.status.operationState.finishedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Operation\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#FF0000'\n  title: Failed to sync application {{.app.metadata.name}}.",
                  "template.app-sync-running": "email:\n  subject: Start syncing application {{.app.metadata.name}}.\nmessage: |\n  The sync operation of application {{.app.metadata.name}} has started at {{.app.status.operationState.startedAt}}.\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#0DADEA\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Started at\",\n      \"value\": \"{{.app.status.operationState.startedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Operation\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  title: Start syncing application {{.app.metadata.name}}.",
                  "template.app-sync-status-unknown": "email:\n  subject: Application {{.app.metadata.name}} sync status is 'Unknown'\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}} Application {{.app.metadata.name}} sync is 'Unknown'.\n  Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\n  {{if ne .serviceType \"slack\"}}\n  {{range $c := .app.status.conditions}}\n      * {{$c.message}}\n  {{end}}\n  {{end}}\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#E96D76\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  title: Application {{.app.metadata.name}} sync status is 'Unknown'",
                  "template.app-sync-succeeded": "email:\n  subject: Application {{.app.metadata.name}} has been successfully synced.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} has been successfully synced at {{.app.status.operationState.finishedAt}}.\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#18be52\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Synced at\",\n      \"value\": \"{{.app.status.operationState.finishedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Operation Details\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#000080'\n  title: Application {{.app.metadata.name}} has been successfully synced"
                },
                "triggers": {
                  "trigger.on-created": "- description: Application is created.\n  oncePer: app.metadata.name\n  send:\n  - app-created\n  when: \"true\"",
                  "trigger.on-deleted": "- description: Application is deleted.\n  oncePer: app.metadata.name\n  send:\n  - app-deleted\n  when: app.metadata.deletionTimestamp != nil",
                  "trigger.on-deployed": "- description: Application is synced and healthy. Triggered once per commit.\n  oncePer: app.status.operationState.syncResult.revision\n  send:\n  - app-deployed\n  when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status\n      == 'Healthy'",
                  "trigger.on-health-degraded": "- description: Application has degraded\n  send:\n  - app-health-degraded\n  when: app.status.health.status == 'Degraded'",
                  "trigger.on-sync-failed": "- description: Application syncing has failed\n  send:\n  - app-sync-failed\n  when: app.status.operationState.phase in ['Error', 'Failed']",
                  "trigger.on-sync-running": "- description: Application is being synced\n  send:\n  - app-sync-running\n  when: app.status.operationState.phase in ['Running']",
                  "trigger.on-sync-status-unknown": "- description: Application status is 'Unknown'\n  send:\n  - app-sync-status-unknown\n  when: app.status.sync.status == 'Unknown'",
                  "trigger.on-sync-succeeded": "- description: Application syncing has succeeded\n  send:\n  - app-sync-succeeded\n  when: app.status.operationState.phase in ['Succeeded']"
                }
              }
            },
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "Rollout",
              "metadata": {
                "name": "example"
              },
              "spec": null
            },
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "RolloutManager",
              "metadata": {
                "name": "example"
              },
              "spec": null
            },
            {
              "apiVersion": "argoproj.io/v1beta1",
              "kind": "ArgoCD",
              "metadata": {
                "name": "argocd"
              },
              "spec": {
                "controller": {
                  "resources": {
                    "limits": {
                      "cpu": "2000m",
                      "memory": "2048Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "1024Mi"
                    }
                  }
                },
                "ha": {
                  "enabled": false,
                  "resources": {
                    "limits": {
                      "cpu": "500m",
                      "memory": "256Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "128Mi"
                    }
                  }
                },
                "rbac": {
                  "defaultPolicy": "",
                  "policy": "g, system:cluster-admins, role:admin\n",
                  "scopes": "[groups]"
                },
                "redis": {
                  "resources": {
                    "limits": {
                      "cpu": "500m",
                      "memory": "256Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "128Mi"
                    }
                  }
                },
                "repo": {
                  "resources": {
                    "limits": {
                      "cpu": "1000m",
                      "memory": "1024Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "256Mi"
                    }
                  }
                },
                "resourceExclusions": "- apiGroups:\n  - tekton.dev\n  clusters:\n  - '*'\n  kinds:\n  - TaskRun\n  - PipelineRun        \n",
                "server": {
                  "resources": {
                    "limits": {
                      "cpu": "500m",
                      "memory": "256Mi"
                    },
                    "requests": {
                      "cpu": "125m",
                      "memory": "128Mi"
                    }
                  },
                  "route": {
                    "enabled": true
                  }
                },
                "sso": {
                  "dex": {
                    "openShiftOAuth": true,
                    "resources": {
                      "limits": {
                        "cpu": "500m",
                        "memory": "256Mi"
                      },
                      "requests": {
                        "cpu": "250m",
                        "memory": "128Mi"
                      }
                    }
                  },
                  "provider": "dex"
                }
              }
            },
            {
              "apiVersion": "pipelines.openshift.io/v1alpha1",
              "kind": "GitopsService",
              "metadata": {
                "name": "gitopsservice-sample"
              },
              "spec": null
            }
          ]
        capabilities: Deep Insights
        console.openshift.io/plugins: '["gitops-plugin"]'
        containerImage: registry.redhat.io/openshift-gitops-1/gitops-rhel8-operator@sha256:b3b8e2e8a4ed592a029ac30fa39419744a7ff95e8d9e94e13c04219e755af553
        createdAt: "2025-03-27 12:57:27"
        description: Enables teams to adopt GitOps principles for managing cluster configurations and application delivery across hybrid multi-cluster Kubernetes environments.
        features.operators.openshift.io/disconnected: "true"
        features.operators.openshift.io/fips-compliant: "true"
        features.operators.openshift.io/proxy-aware: "true"
        features.operators.openshift.io/tls-profiles: "false"
        features.operators.openshift.io/token-auth-aws: "false"
        features.operators.openshift.io/token-auth-azure: "false"
        features.operators.openshift.io/token-auth-gcp: "false"
        olm.skipRange: '>=1.0.0 <1.16.0'
        operatorframework.io/cluster-monitoring: "true"
        operatorframework.io/suggested-namespace: openshift-gitops-operator
        operators.openshift.io/infrastructure-features: '["disconnected"]'
        operators.openshift.io/valid-subscription: '["OpenShift Container Platform", "OpenShift Platform Plus"]'
        operators.operatorframework.io/builder: operator-sdk-v1.35.0
        operators.operatorframework.io/internal-objects: '["gitopsservices.pipelines.openshift.io"]'
        operators.operatorframework.io/project_layout: go.kubebuilder.io/v4
        repository: https://github.com/redhat-developer/gitops-operator
        support: Red Hat
      apiServiceDefinitions: {}
      crdDescriptions:
        owned:
          - description: An AnalysisRun is an instantiation of an AnalysisTemplate. AnalysisRuns are like Jobs in that they eventually complete.
            displayName: AnalysisRun
            kind: AnalysisRun
            name: analysisruns.argoproj.io
            version: v1alpha1
          - description: An AnalysisTemplate is a template spec which defines how to perform a canary analysis, such as the metrics, its frequency, and the values which are considered successful or failed.
            displayName: AnalysisTemplate
            kind: AnalysisTemplate
            name: analysistemplates.argoproj.io
            version: v1alpha1
          - description: An Application is a group of Kubernetes resources as defined by a manifest.
            displayName: Application
            kind: Application
            name: applications.argoproj.io
            version: v1alpha1
          - description: ApplicationSet is the representation of an ApplicationSet controller deployment.
            displayName: ApplicationSet
            kind: ApplicationSet
            name: applicationsets.argoproj.io
            version: v1alpha1
          - description: An AppProject is a logical grouping of Argo CD Applications.
            displayName: AppProject
            kind: AppProject
            name: appprojects.argoproj.io
            version: v1alpha1
          - kind: ArgoCD
            name: argocds.argoproj.io
            version: v1alpha1
          - description: Argo CD is the representation of an Argo CD deployment.
            displayName: Argo CD
            kind: ArgoCD
            name: argocds.argoproj.io
            resources:
              - kind: ArgoCD
                name: ""
                version: v1beta1
              - kind: ConfigMap
                name: ""
                version: v1
              - kind: CronJob
                name: ""
                version: v1
              - kind: Deployment
                name: ""
                version: v1
              - kind: Ingress
                name: ""
                version: v1
              - kind: Job
                name: ""
                version: v1
              - kind: PersistentVolumeClaim
                name: ""
                version: v1
              - kind: Pod
                name: ""
                version: v1
              - kind: Prometheus
                name: ""
                version: v1
              - kind: ReplicaSet
                name: ""
                version: v1
              - kind: Route
                name: ""
                version: v1
              - kind: Secret
                name: ""
                version: v1
              - kind: Service
                name: ""
                version: v1
              - kind: ServiceMonitor
                name: ""
                version: v1
              - kind: StatefulSet
                name: ""
                version: v1
            version: v1beta1
          - description: A ClusterAnalysisTemplate is like an AnalysisTemplate,but it is not limited to its namespace. It can be used by any Rollout throughout the cluster.
            displayName: ClusterAnalysisTemplate
            kind: ClusterAnalysisTemplate
            name: clusteranalysistemplates.argoproj.io
            version: v1alpha1
          - description: An Experiment is limited run of one or more ReplicaSets for the purposes of analysis. Experiments typically run for a pre-determined duration, but can also run indefinitely until stopped.
            displayName: Experiment
            kind: Experiment
            name: experiments.argoproj.io
            version: v1alpha1
          - description: GitopsService is the Schema for the gitopsservices API
            displayName: Gitops Service
            kind: GitopsService
            name: gitopsservices.pipelines.openshift.io
            version: v1alpha1
          - description: NotificationsConfigurations contains the notification template used to generate notifications that notify users about important changes in the application state.
            displayName: NotificationsConfiguration
            kind: NotificationsConfiguration
            name: notificationsconfigurations.argoproj.io
            version: v1alpha1
          - description: A controller for managing Argo Rollouts
            displayName: RolloutManager
            kind: RolloutManager
            name: rolloutmanagers.argoproj.io
            version: v1alpha1
          - kind: Rollout
            name: rollouts.argoproj.io
            version: v1alpha1
      description: "Red Hat OpenShift GitOps is a declarative continuous delivery platform based on [Argo CD](https://argoproj.github.io/argo-cd/). It enables teams to adopt GitOps principles for managing cluster configurations and automating secure and repeatable application delivery across hybrid multi-cluster Kubernetes environments. Following GitOps and infrastructure as code principles, you can store the configuration of clusters and applications in Git repositories and use Git workflows to roll them out to the target clusters.\n\n## Features\n* Automated install and upgrades of Argo CD\n* Manual and automated configuration sync from Git repositories to target OpenShift and Kubernetes clusters\n* Support for the Helm and Kustomize templating tools\n* Configuration drift detection and visualization on live clusters\n* Audit trails of rollouts to the clusters\n* Monitoring and logging integration with OpenShift\n##Components\n* Argo CD 2.14.7\n\n## How to Install \nAfter installing the OpenShift GitOps operator, an instance  of Argo CD is installed in the `openshift-gitops` namespace which has sufficent privileges for managing cluster configurations. You can create additional Argo CD instances using the `ArgoCD` custom resource within the desired namespaces.\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ArgoCD\nmetadata:\n  name: argocd\nspec:\n  server:\n    route:\n      enabled: true\n```\n\nOpenShift GitOps is a layered product on top of OpenShift that enables teams to adopt GitOps principles for managing cluster configurations and automating secure and repeatable application delivery across hybrid multi-cluster Kubernetes environments. OpenShift GitOps is built around Argo CD as the core upstream project and assists customers to establish an end-to-end application delivery workflow on GitOps principles.\n"
      displayName: Red Hat OpenShift GitOps
      installModes:
        - supported: false
          type: OwnNamespace
        - supported: false
          type: SingleNamespace
        - supported: false
          type: MultiNamespace
        - supported: true
          type: AllNamespaces
      keywords:
        - devtools
        - gitops
        - pipelines
      labels:
        operatorframework.io/arch.amd64: supported
        operatorframework.io/arch.arm64: supported
        operatorframework.io/arch.ppc64le: supported
        operatorframework.io/arch.s390x: supported
        operatorframework.io/os.linux: supported
      maintainers:
        - email: team-gitops@redhat.com
          name: OpenShift GitOps Team
      maturity: GA
      provider:
        name: Red Hat Inc
relatedImages:
  - image: registry.redhat.io/openshift-gitops-1/argo-rollouts-rhel8@sha256:86e8e3fd40ba52e85463a2280f42329786ce1d823327db49a866ace6297d43e9
    name: argo_rollouts_image
  - image: registry.redhat.io/openshift-gitops-1/argocd-extensions-rhel8@sha256:64dc5e6ee93fe076829e758087a69691752cfd26fe340ec12ab953b38dac2558
    name: argocd_extension_image
  - image: registry.redhat.io/openshift-gitops-1/argocd-rhel8@sha256:2c5be3fefcb6cbef4f8af0030a630981b7452cab9d7f14b19856b8e4ea8e638f
    name: argocd_image
  - image: registry.redhat.io/openshift-gitops-1/console-plugin-rhel8@sha256:d7fae25f0fb79fc8d0abccc2fbd30c74d56b16b2582b4794d67da7b256add3e7
    name: gitops_console_plugin_image
  - image: registry.redhat.io/openshift-gitops-1/dex-rhel8@sha256:9a17cb3f6a43b574d27233bf6ca145d38aa38195bed33d29441c9dc38ff317a7
    name: argocd_dex_image
  - image: registry.redhat.io/openshift-gitops-1/gitops-operator-bundle@sha256:5102b7d404ab4cd1bfc2a19024c10e1a295ba610cbb16aa0c75f1bfe5c66bfd2
    name: ""
  - image: registry.redhat.io/openshift-gitops-1/gitops-rhel8-operator@sha256:b3b8e2e8a4ed592a029ac30fa39419744a7ff95e8d9e94e13c04219e755af553
    name: gitops-rhel8-operator-b3b8e2e8a4ed592a029ac30fa39419744a7ff95e8d9e94e13c04219e755af553-annotation
  - image: registry.redhat.io/openshift-gitops-1/gitops-rhel8-operator@sha256:b3b8e2e8a4ed592a029ac30fa39419744a7ff95e8d9e94e13c04219e755af553
    name: manager
  - image: registry.redhat.io/openshift-gitops-1/gitops-rhel8@sha256:8ebdaf548ad61d312d851d9840c6d0f7d99cf15eedd1aab08715d0f37b0ea8e8
    name: backend_image
  - image: registry.redhat.io/openshift-gitops-1/must-gather-rhel8@sha256:86d0c9efdcbb9923a30cd21a6b0ba9f92accadf6a200de2f01e79880f6e236c8
    name: must_gather_image
  - image: registry.redhat.io/openshift4/ose-haproxy-router@sha256:72817b62a55fb0f82f2908effc7bd3d20409fc60e9f228449d8f78eb390e22ac
    name: argocd_redis_ha_proxy_image
  - image: registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:baa41441752d6d739065eda587b92402e209c67fbcdacf0a40559d37c9e978eb
    name: kube-rbac-proxy
  - image: registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:cd1003ba9e9f51e132729592921201c8cea8b020442d96e72c9975d423915d10
    name: kube_rbac_proxy_image
  - image: registry.redhat.io/rh-sso-7/sso76-openshift-rhel8@sha256:cf52b301f1c37c1de925bcf7e16005b0a3a1865645db29fd671d47db592da1e7
    name: argocd_keycloak_image
  - image: registry.redhat.io/rhel9/redis-7@sha256:848f4298a9465dafb7ce9790e991bd8a11de2558e3a6685e1d7c4a6e0fc5f371
    name: argocd_redis_image
schema: olm.bundle
